! Module  : limb_specint_m
! Purpose : define limb_specint_t type, for representing spectral
!           intensity parameterized by a limb-darkening law
!
! Copyright 2021-2022 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

module limb_specint_m

   ! Uses

   use forum_m

   use limb_m
   use limb_photint_m
   use passband_m
   use photint_m
   use range_m
   use specint_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none (type, external)

   ! Derived-type definitions

   type, extends(specint_t) :: limb_specint_t
      private
      real(RD), allocatable       :: c(:,:)
      real(RD), allocatable       :: lam(:)
      class(range_t), allocatable :: range
      type(limb_t)                :: limb
      integer                     :: n_b
      integer                     :: n_lam
      logical                     :: precise
   contains
      private
      procedure, public :: get_lam_min
      procedure, public :: get_lam_max
      procedure, public :: get_precise
      procedure, public :: get_ssize
      procedure, public :: interp_intensity
      procedure, public :: interp_E_moment
      procedure, public :: interp_D_moment
      procedure, public :: interp_flux
      procedure         :: interp_f_
      procedure, public :: subset
      procedure, public :: rebin
      procedure, public :: filter
      procedure, public :: read
      procedure, public :: write
   end type limb_specint_t

   ! Interfaces

   interface limb_specint_t
      module procedure limb_specint_t_
      module procedure limb_specint_t_fit_
   end interface limb_specint_t

   ! In limb_specint_construct_sm

   interface

      module function limb_specint_t_(c, range, limb, precise) result(specint)
         implicit none (type, external)
         real(RD), intent(in)          :: c(:,:)
         class(range_t), intent(in)    :: range
         type(limb_t), intent(in)      :: limb
         logical, intent(in), optional :: precise
         type(limb_specint_t)          :: specint
      end function limb_specint_t_

      function limb_specint_t_fit_(I, mu, range, limb, precise) result(specint)
         implicit none (type, external)
         real(RD), intent(in)          :: I(:,:)
         real(RD), intent(in)          :: mu(:)
         class(range_t), intent(in)    :: range
         type(limb_t), intent(in)      :: limb
         logical, intent(in), optional :: precise
         type(limb_specint_t)          :: specint
      end function limb_specint_t_fit_

   end interface

   ! In limb_specint_params_sm

   interface

      module subroutine get_lam_min(self, lam_min)
         implicit none (type, external)
         class(limb_specint_t), intent(in) :: self
         real(RD), intent(out)             :: lam_min
      end subroutine get_lam_min

      module subroutine get_lam_max(self, lam_max)
         implicit none (type, external)
         class(limb_specint_t), intent(in) :: self
         real(RD), intent(out)             :: lam_max
      end subroutine get_lam_max

      module subroutine get_precise(self, precise)
         implicit none (type, external)
         class(limb_specint_t), intent(in) :: self
         logical, intent(out)              :: precise
      end subroutine get_precise

      module subroutine get_ssize(self, ssize)
         implicit none (type, external)
         class(limb_specint_t), intent(in) :: self
         integer(ID), intent(out)          :: ssize
      end subroutine get_ssize

   end interface

   ! In limb_specint_interp_sm

   interface

      module subroutine interp_intensity(self, mu, lam, res, stat)
         implicit none (type, external)
         class(limb_specint_t), intent(in) :: self
         real(RD), intent(in)              :: mu
         real(RD), intent(in)              :: lam(:)
         real(RD), intent(out)             :: res(:)
         integer, intent(out), optional    :: stat
      end subroutine interp_intensity

      module subroutine interp_E_moment(self, k, lam, res, stat)
         implicit none (type, external)
         class(limb_specint_t), intent(in) :: self
         integer, intent(in)               :: k
         real(RD), intent(in)              :: lam(:)
         real(RD), intent(out)             :: res(:)
         integer, intent(out), optional    :: stat
      end subroutine interp_E_moment

      module subroutine interp_D_moment(self, l, lam, res, stat)
         implicit none (type, external)
         class(specint_t), intent(in)   :: self
         integer intent(in)             :: l
         real(RD), intent(in)           :: lam(:)
         real(RD), intent(out)          :: res(:)
         integer, intent(out), optional :: stat
      end subroutine interp_D_moment

      module subroutine interp_flux(self, lam, res, stat)
         implicit none (type, external)
         class(limb_specint_t), intent(in) :: self
         real(RD), intent(in)              :: lam(:)
         real(RD), intent(out)             :: res(:)
         integer, intent(out), optional    :: stat
      end subroutine interp_flux

   end interface

   ! In limb_specint_operate_sm

   interface

      module subroutine subset(self, lam_min, lam_max, specint, stat)
         implicit none (type, external)
         class(limb_specint_t), intent(in)          :: self
         real(RD), intent(in)                       :: lam_min
         real(RD), intent(in)                       :: lam_max
         class(specint_t), allocatable, intent(out) :: specint
         integer, intent(out), optional             :: stat
      end subroutine subset

      module subroutine rebin(self, range, specint, stat)
         implicit none (type, external)
         class(limb_specint_t), intent(in)          :: self
         class(range_t), intent(in)                 :: range
         class(specint_t), allocatable, intent(out) :: specint
         integer, intent(out), optional             :: stat
      end subroutine rebin

      module subroutine filter(self, passband, photint, stat)
         implicit none (type, external)
         class(limb_specint_t), intent(in)          :: self
         type(passband_t), intent(in)               :: passband
         class(photint_t), allocatable, intent(out) :: photint
         integer, intent(out), optional             :: stat
      end subroutine filter

   end interface

   ! In limb_specint_io_sm

   interface

      module subroutine write(self, hdf5io, stat)
         implicit none (type, external)
         class(limb_specint_t), intent(in) :: self
         type(hdf5io_t), intent(inout)     :: hdf5io
         integer, intent(out), optional    :: stat
      end interface

      module subroutine read(self, hdf5io, stat)
         implicit none (type, external)
         class(limb_specint_t), intent(out) :: self
         type(hdf5io_t), intent(inout)      :: hdf5io
         integer, intent(out), optional     :: stat
      end subroutine read

   end interface

   ! Access specifiers

   private

   public :: limb_specint_t

end module limb_specint_m
