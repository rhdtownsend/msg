! Submodule : specgrid_attribs_sm
! Purpose   : Attribute get/set routines for specgrid_t
!
! Copyright 2021-2025 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

submodule (specgrid_m) specgrid_attribs_sm

   ! No implicit typing

   implicit none (type, external)

   ! Procedures

contains

   module procedure get_rank

      ! Get the rank

      call self%vgrid%get_rank(rank)

      ! Finish

      return

   end procedure get_rank

   !****

   module procedure get_shape

      ! Get the shape

      call self%vgrid%get_shape(shape)

      ! Finish

      return

   end procedure get_shape

   !****

   module procedure get_axis

      ! Get the i'th axis

      call self%vgrid%get_axis(i, axis)

      ! Finish

      return

   end procedure get_axis

   !****

   #:for name, type in (('lam_min', 'real(RD)'), &
                        ('lam_max', 'real(RD)'))

      module procedure get_${name}$

         ! Get ${name}$

         ${name}$ = self%${name}$

         ! Finish

         return

      end procedure get_${name}$

   #:endfor

   !****

   #:for name, type in (('lam_min', 'real(RD)'), &
                        ('lam_max', 'real(RD)'), &
                        ('limit', 'integer'),    &
                        ('usage', 'integer'))

      module procedure get_cache_${name}$

         ! Get cache_${name}$

         call self%speccache%get_${name}$(cache_${name}$)

         ! Finish

         return

      end procedure get_cache_${name}$

   #:endfor

   !****

   module procedure set_cache_lam_min

      ! Set the cache minimum wavelength

      if (cache_lam_min < self%lam_min) then
         if (PRESENT(stat)) then
            stat = STAT_INVALID_ARGUMENT
            return
         else
            @:ABORT('invalid argument')
         end if
      end if

      call self%speccache%set_lam_min(cache_lam_min, stat)

      ! Finish

      return

   end procedure set_cache_lam_min

   !****

   module procedure set_cache_lam_max

      ! Set the cache maximum wavelength

      if (cache_lam_max > self%lam_max) then
         if (PRESENT(stat)) then
            stat = STAT_INVALID_ARGUMENT
            return
         else
            @:ABORT('invalid argument')
         end if
      end if

      call self%speccache%set_lam_max(cache_lam_max, stat)

      ! Finish

      return

   end procedure set_cache_lam_max

   !****

   module procedure set_cache_limit

      ! Set the cache memory usage limit

      call self%speccache%set_limit(cache_limit, stat)

      ! Finish

      return

   end procedure set_cache_limit

end submodule specgrid_attribs_sm
