! Module  : specgrid_m
! Purpose : Define specgrid_t type, for representing spectral intensity
!           grids
!
! Copyright 2021-2022 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

module specgrid_m

   ! Uses

   use forum_m

   use axis_m
   use file_m
   use passband_m
   use photgrid_m
   use speccache_m
   use specint_m
   use specsource_m
   use hdf5_specsource_m
   use spec_photsource_m
   use stat_m
   use vgrid_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none (type, external)

   ! Derived-type definitions

   type :: specgrid_t
      private
      class(specsource_t), allocatable :: specsource
      type(speccache_t)                :: speccache
      type(vgrid_t)                    :: vgrid
      real(RD)                         :: lam_min
      real(RD)                         :: lam_max
   contains
      private
      procedure, public :: get_rank
      procedure, public :: get_shape
      procedure, public :: get_axis
      procedure, public :: get_lam_min
      procedure, public :: get_lam_max
      procedure, public :: get_cache_lam_min
      procedure, public :: get_cache_lam_max
      procedure, public :: get_cache_limit
      procedure, public :: get_cache_usage
      procedure, public :: set_cache_lam_min
      procedure, public :: set_cache_lam_max
      procedure, public :: set_cache_limit
      procedure, public :: flush_cache
      procedure, public :: interp_intensity
      procedure, public :: interp_E_moment
      procedure, public :: interp_D_moment
      procedure, public :: interp_irradiance
      procedure, public :: interp_flux
      procedure, public :: adjust_x_vec
      procedure, public :: filter
      procedure, public :: read
      procedure, public :: write
   end type specgrid_t

   ! Interfaces

   interface specgrid_t
      module procedure specgrid_t_
   end interface specgrid_t

   ! In specgrid_construct_sm

   interface

      module function specgrid_t_(specsource, vgrid) result (specgrid)
         implicit none (type, external)
         class(specsource_t), intent(in) :: specsource
         type(vgrid_t), intent(in)       :: vgrid
         type(specgrid_t)                :: specgrid
      end function specgrid_t_

   end interface

   ! In specgrid_attribs_sm

   interface

      module subroutine get_rank(self, rank)
         implicit none (type, external)
         class(specgrid_t), intent(in) :: self
         integer, intent(out)          :: rank
      end subroutine get_rank

      module subroutine get_shape(self, shape)
         implicit none (type, external)
         class(specgrid_t), intent(in) :: self
         integer, intent(out)          :: shape(:)
      end subroutine get_shape

      module subroutine get_axis(self, i, axis)
         implicit none (type, external)
         class(specgrid_t), intent(in) :: self
         integer, intent(in)           :: i
         type(axis_t), intent(out)     :: axis
      end subroutine get_axis

      module subroutine get_lam_min(self, lam_min)
         implicit none (type, external)
         class(specgrid_t), intent(in) :: self
         real(RD), intent(out)         :: lam_min
      end subroutine get_lam_min

      module subroutine get_lam_max(self, lam_max)
         implicit none (type, external)
         class(specgrid_t), intent(in) :: self
         real(RD), intent(out)         :: lam_max
      end subroutine get_lam_max

      module subroutine get_cache_lam_min(self, cache_lam_min)
         implicit none (type, external)
         class(specgrid_t), intent(in) :: self
         real(RD), intent(out)         :: cache_lam_min
      end subroutine get_cache_lam_min

      module subroutine get_cache_lam_max(self, cache_lam_max)
         implicit none (type, external)
         class(specgrid_t), intent(in) :: self
         real(RD), intent(out)         :: cache_lam_max
      end subroutine get_cache_lam_max

      module subroutine get_cache_limit(self, cache_limit)
         implicit none (type, external)
         class(specgrid_t), intent(in) :: self
         integer, intent(out)         :: cache_limit
      end subroutine get_cache_limit

      module subroutine get_cache_usage(self, cache_usage)
         implicit none (type, external)
         class(specgrid_t), intent(in) :: self
         integer, intent(out)         :: cache_usage
      end subroutine get_cache_usage

      module subroutine set_cache_lam_min(self, cache_lam_min, stat)
         implicit none (type, external)
         class(specgrid_t), intent(inout) :: self
         real(RD), intent(in)             :: cache_lam_min
         integer, intent(out), optional   :: stat
      end subroutine set_cache_lam_min

      module subroutine set_cache_lam_max(self, cache_lam_max, stat)
         implicit none (type, external)
         class(specgrid_t), intent(inout) :: self
         real(RD), intent(in)             :: cache_lam_max
         integer, intent(out), optional   :: stat
      end subroutine set_cache_lam_max

      module subroutine set_cache_limit(self, cache_limit, stat)
         implicit none (type, external)
         class(specgrid_t), intent(inout) :: self
         integer, intent(in)              :: cache_limit
         integer, intent(out), optional   :: stat
      end subroutine set_cache_limit

   end interface

   ! In specgrid_interp_sm

   interface

      module subroutine interp_intensity(self, x_vec, mu, lam, res, stat, deriv_vec, order)
         implicit none (type, external)
         class(specgrid_t), target, intent(inout) :: self
         real(RD), intent(in)                     :: x_vec(:)
         real(RD), intent(in)                     :: mu
         real(RD), intent(in)                     :: lam(:)
         real(RD), intent(out)                    :: res(:)
         integer, intent(out), optional           :: stat
         logical, intent(in), optional            :: deriv_vec(:)
         integer, intent(in), optional            :: order
      end subroutine interp_intensity

      module subroutine interp_E_moment(self, x_vec, k, lam, res, stat, deriv_vec, order)
         implicit none (type, external)
         class(specgrid_t), target, intent(inout) :: self
         real(RD), intent(in)                     :: x_vec(:)
         integer, intent(in)                      :: k
         real(RD), intent(in)                     :: lam(:)
         real(RD), intent(out)                    :: res(:)
         integer, intent(out), optional           :: stat
         logical, intent(in), optional            :: deriv_vec(:)
         integer, intent(in), optional            :: order
      end subroutine interp_E_moment

      module subroutine interp_D_moment(self, x_vec, l, lam, res, stat, deriv_vec, order)
         implicit none (type, external)
         class(specgrid_t), target, intent(inout) :: self
         real(RD), intent(in)                     :: x_vec(:)
         integer, intent(in)                      :: l
         real(RD), intent(in)                     :: lam(:)
         real(RD), intent(out)                    :: res(:)
         integer, intent(out), optional           :: stat
         logical, intent(in), optional            :: deriv_vec(:)
         integer, intent(in), optional            :: order
      end subroutine interp_D_moment

      module subroutine interp_irradiance(self, x_vec, mu, dA, d, lam, res, stat, deriv_vec, order)
         implicit none (type, external)
         class(specgrid_t), target, intent(inout) :: self
         real(RD), intent(in)                     :: x_vec(:,:)
         real(RD), intent(in)                     :: mu(:)
         real(RD), intent(in)                     :: dA(:)
         real(RD), intent(in)                     :: d(:)
         real(RD), intent(in)                     :: lam(:)
         real(RD), intent(out)                    :: res(:)
         integer, intent(out), optional           :: stat
         logical, intent(in), optional            :: deriv_vec(:)
         integer, intent(in), optional            :: order
      end subroutine interp_irradiance

      module subroutine interp_flux(self, x_vec, lam, res, stat, deriv_vec, order)
         implicit none (type, external)
         class(specgrid_t), target, intent(inout) :: self
         real(RD), intent(in)                     :: x_vec(:)
         real(RD), intent(in)                     :: lam(:)
         real(RD), intent(out)                    :: res(:)
         integer, intent(out), optional           :: stat
         logical, intent(in), optional            :: deriv_vec(:)
         integer, intent(in), optional            :: order
      end subroutine interp_flux

      module subroutine adjust_x_vec(self, x_vec, dx_vec, x_adj, stat)
         implicit none (type, external)
         class(specgrid_t), intent(in)  :: self
         real(RD), intent(in)           :: x_vec(:)
         real(RD), intent(in)           :: dx_vec(:)
         real(RD), intent(out)          :: x_adj(:)
         integer, intent(out), optional :: stat
      end subroutine adjust_x_vec

   end interface

   ! In specgrid_operate_sm

   interface

      module subroutine filter(self, passband, photgrid, stat)
         implicit none (type, external)
         class(specgrid_t), intent(in)  :: self
         type(passband_t), intent(in)   :: passband
         type(photgrid_t), intent(out)  :: photgrid
         integer, intent(out), optional :: stat
      end subroutine filter

   end interface

   ! In specgrid_io_sm

   interface

      module subroutine read(self, hdf5io, stat)
         implicit none (type, external)
         class(specgrid_t), intent(out) :: self
         type(hdf5io_t), intent(inout)  :: hdf5io
         integer, intent(out), optional :: stat
      end subroutine read

      module subroutine write(self, hdf5io, stat)
         implicit none (type, external)
         class(specgrid_t), intent(inout) :: self
         type(hdf5io_t), intent(inout)    :: hdf5io
         integer, intent(out), optional   :: stat
      end subroutine write

   end interface

   ! Access specifiers

   private

   public :: specgrid_t

   ! Procedures

contains

   subroutine flush_cache(self)

      class(specgrid_t), intent(inout) :: self

      ! Flush the cache

      call self%speccache%flush()

      ! Finish

      return

   end subroutine flush_cache

end module specgrid_m
