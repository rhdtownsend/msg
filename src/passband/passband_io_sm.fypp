! Submodule : passband_io_sm
! Purpose   : Input/output routines for passband_t
!
! Copyright 2021-2025 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

submodule (passband_m) passband_io_sm

   ! Uses

   use file_m
   use stat_m

   ! No implicit typing

   implicit none (type, external)

   ! Procedures

contains

   module procedure read

      integer :: revision

      ! Read the passband_t

      call check_type(hdf5io, 'passband_t', stat)
      if (PRESENT(stat)) then
         if (stat /= STAT_OK) return
      end if

      call hdf5io%read_attr('REVISION', revision)

      select case(revision)
      case(1)
         call read_rev1_(self, hdf5io, stat)
      case default
         if (PRESENT(stat)) then
            stat = STAT_INVALID_GROUP_REVISION
            return
         else
            @:ABORT('invalid group revision')
         end if
      end select

      ! Finish

      return

   contains

      subroutine read_rev1_(self, hdf5io, stat)

         class(passband_t), intent(out) :: self
         type(hdf5io_t), intent(inout)  :: hdf5io
         integer, intent(out), optional :: stat

         real(RD)       :: F_0
         type(hdf5io_t) :: hdf5io_cubint
         type(cubint_t) :: cubint

         call hdf5io%read_attr('F_0', F_0)

         hdf5io_cubint = hdf5io_t(hdf5io, 'cubint')
         call cubint%read(hdf5io_cubint, stat)
         call hdf5io_cubint%final()
         if (PRESENT(stat)) then
            if (stat /= STAT_OK) return
         end if

         select type(self)
         type is(passband_t)
            self = passband_t_cubint_(cubint, F_0)
         class default
            @:ABORT('invalid type')
         end select

         if (PRESENT(stat)) stat = STAT_OK

         return

      end subroutine read_rev1_

   end procedure read

   !****

   module procedure write

      type(hdf5io_t) :: hdf5io_cubint

      ! Write the passband_t

      call hdf5io%write_attr('TYPE', 'passband_t')
      call hdf5io%write_attr('REVISION', 1)

      call hdf5io%write_attr('F_0', self%F_0)

      hdf5io_cubint = hdf5io_t(hdf5io, 'cubint')
      call self%cubint%write(hdf5io_cubint, stat)
      call hdf5io_cubint%final()
      if (PRESENT(stat)) then
         if (stat /= STAT_OK) return
      end if

      ! Finish

      if (PRESENT(stat)) stat = STAT_OK

      return

   end procedure write

end submodule passband_io_sm
