! Module  : speccache_m
! Purpose : Define speccache_t type, for representing a cached
!           table of specint_t's
!
! Copyright 2022 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

module speccache_m

   ! Uses

   use forum_m

   use specint_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none (type, external)

   ! Parameter definitions

   integer(ID), parameter :: INITIAL_LIMIT = 128

   ! Derived-type definitions

   type :: speccache_t
      private
      type(specint_element_t), allocatable :: specint_elements(:)
      integer, allocatable                 :: ref_counts(:)
      integer, allocatable                 :: exp_counts(:)
      real(RD)                             :: lam_min
      real(RD)                             :: lam_max
      integer(ID)                          :: ssize
      integer                              :: limit
      integer                              :: n
   contains
      private
      procedure, public :: get_lam_min
      procedure, public :: get_lam_max
      procedure, public :: get_limit
      procedure, public :: get_usage
      procedure, public :: set_lam_min
      procedure, public :: set_lam_max
      procedure, public :: set_limit
      procedure, public :: fetch
      procedure, public :: release
      procedure, public :: flush
      procedure         :: trim_
   end type speccache_t

   type :: specint_element_t
      class(specint_t), allocatable :: specint
   end type specint_element_t

   ! Interfaces

   interface speccache_t
      module procedure speccache_t_
   end interface speccache_t

   ! In speccache_construct_sm

   interface

      module function speccache_t_(n, lam_min, lam_max) result(speccache)
         implicit none (type, external)
         integer, intent(in)  :: n
         real(RD), intent(in) :: lam_min
         real(RD), intent(in) :: lam_max
         type(speccache_t)    :: speccache
      end function speccache_t_

   end interface

   ! In speccache_attribs_sm

   interface

      module subroutine get_lam_min(self, lam_min)
         implicit none (type, external)
         class(speccache_t), intent(in) :: self
         real(RD), intent(out)          :: lam_min
      end subroutine get_lam_min

      module subroutine get_lam_max(self, lam_max)
         implicit none (type, external)
         class(speccache_t), intent(in) :: self
         real(RD), intent(out)          :: lam_max
      end subroutine get_lam_max

      module subroutine get_limit(self, limit)
         implicit none (type, external)
         class(speccache_t), intent(in) :: self
         integer, intent(out)           :: limit
      end subroutine get_limit

      module subroutine get_usage(self, usage)
         implicit none (type, external)
         class(speccache_t), intent(in) :: self
         integer, intent(out)           :: usage
      end subroutine get_usage

      module subroutine set_lam_min(self, lam_min, stat)
         implicit none (type, external)
         class(speccache_t), intent(inout) :: self
         real(RD), intent(in)              :: lam_min
         integer, intent(out), optional    :: stat
      end subroutine set_lam_min

      module subroutine set_lam_max(self, lam_max, stat)
         implicit none (type, external)
         class(speccache_t), intent(inout) :: self
         real(RD), intent(in)              :: lam_max
         integer, intent(out), optional    :: stat
      end subroutine set_lam_max

      module subroutine set_limit(self, limit, stat)
         implicit none (type, external)
         class(speccache_t), intent(inout) :: self
         integer, intent(in)               :: limit
         integer, intent(out), optional    :: stat
      end subroutine set_limit

   end interface

   ! In speccache_access_t

   interface

      module subroutine fetch(self, i, fetch_proc, specint, stat)
         implicit none (type, external)
         class(speccache_t), target, intent(inout) :: self
         integer, intent(in)                       :: i
         interface
            subroutine fetch_proc(i, specint, stat)
               use specint_m
               integer, intent(in)                        :: i
               class(specint_t), allocatable, intent(out) :: specint
               integer, intent(out), optional             :: stat
            end subroutine fetch_proc
         end interface
         class(specint_t), pointer, intent(out) :: specint
         integer, intent(out), optional         :: stat
      end subroutine fetch

      module subroutine release(self, i, stat)
         implicit none (type, external)
         class(speccache_t), target, intent(inout) :: self
         integer, intent(in)                       :: i
         integer, intent(out), optional            :: stat
      end subroutine release

      module subroutine flush(self)
         implicit none (type, external)
         class(speccache_t), intent(inout) :: self
      end subroutine flush

      module subroutine trim_(self)
         implicit none (type, external)
         class(speccache_t), intent(inout) :: self
      end subroutine trim_

   end interface

   ! Access specifiers

   private

   public :: speccache_t

contains

   !****

end module speccache_m
