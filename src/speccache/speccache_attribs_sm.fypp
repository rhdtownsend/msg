! Submodule : speccache_attribs_sm
! Purpose   : Attribute get/set routines for speccache_t
!
! Copyright 2021-2022 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

submodule (speccache_m) speccache_attribs_sm

   ! Uses

   use stat_m

   ! No implicit typing

   implicit none (type, external)

   ! Procedures

contains

   !****

   #:for name, type in (('lam_min', 'real(RD)'), &
                        ('lam_max', 'real(RD)'), &
                        ('limit', 'integer'))

      module procedure get_${name}$

         ! Get ${name}$

         ${name}$ = self%${name}$

         ! Finish

         return

      end procedure get_${name}$

   #:endfor

   !****

   module procedure get_usage

      ! Get the memory usage (megabytes)

      usage = self%ssize/(1024*1024)

      ! Finish

      return

   end procedure get_usage

   !****

   module procedure set_lam_min

      ! Set lam_min

      if(lam_min >= self%lam_max) then
         if (PRESENT(stat)) then
            stat = STAT_INVALID_ARGUMENT
            return
         else
            @:ABORT('invalid argument')
         end if
      end if

      self%lam_min = lam_min

      ! Flush the cache

      call self%flush()

      ! Finish

      if (PRESENT(stat)) stat = STAT_OK

      return

   end procedure set_lam_min

   !****

   module procedure set_lam_max

      ! Set lam_max

      if(lam_max <= self%lam_min) then
         if (PRESENT(stat)) then
            stat = STAT_INVALID_ARGUMENT
            return
         else
            @:ABORT('invalid argument')
         end if
      end if

      self%lam_max = lam_max

      ! Flush the cache

      call self%flush()

      ! Finish

      if (PRESENT(stat)) stat = STAT_OK

      return

   end procedure set_lam_max

   !****

   module procedure set_limit

      ! Set the cache memory usage limit

      if (limit < 0_ID) then
         if (PRESENT(stat)) then
            stat = STAT_INVALID_ARGUMENT
            return
         else
            @:ABORT('invalid argument')
         end if
      end if

      self%limit = limit

      ! Trim the cache

      call self%trim_()

      ! Finish

      if (PRESENT(stat)) stat = STAT_OK

      return

   end procedure set_limit

end submodule speccache_attribs_sm
