! Module  : ninterp_m
! Purpose : Routines for N-dimensional linear and cubic hermite interpolation
!
! Copyright 2021-2023 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

module ninterp_m

   ! Uses

   use forum_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none (type, external)

   ! Interfaces

   ! In ninterp_linear_sm

   interface

      module function interp_kernel_linear(rank, u, edge_deltas, deriv) result(interp_kernel)
         implicit none (type, external)
         integer, intent(in)           :: rank
         real(RD), intent(in)          :: u(:)
         real(RD), intent(in)          :: edge_deltas(:)
         logical, intent(in), optional :: deriv(:)
         real(RD)                      :: interp_kernel(2**rank)
      end function interp_kernel_linear

   end interface

   ! In ninterp_cubic_sm

   interface

      module function data_kernel_cubic(rank, cell_mask, edge_deltas) result(data_kernel)
         implicit none (type, external)
         integer, intent(in)   :: rank
         logical, intent(in)   :: cell_mask(:)
         real(RD), intent(in)  :: edge_deltas(:,:)
         real(RD)              :: data_kernel(4**rank,4**rank)
      end function data_kernel_cubic

      module function data_kernel_cubic_cached(rank, cache) result(data_kernel)
         implicit none (type, external)
         integer, intent(in)   :: rank
         real(RD), intent(in)  :: cache(:,:)
         real(RD)              :: data_kernel(4**rank,4**rank)
      end function data_kernel_cubic_cached

      module function vertex_cache_cubic(rank, vert_mask, edge_deltas) result(cache)
         implicit none (type, external)
         integer, intent(in)  :: rank
         logical, intent(in)  :: vert_mask(:)
         real(RD), intent(in) :: edge_deltas(:,:)
         real(RD)             :: cache(3*rank*2)
      end function vertex_cache_cubic

      module function interp_kernel_cubic(rank, u, edge_deltas, data_kernel, deriv) result(interp_kernel)
         implicit none (type, external)
         integer, intent(in)           :: rank
         real(RD), intent(in)          :: u(:)
         real(RD), intent(in)          :: edge_deltas(:)
         real(RD), intent(in)          :: data_kernel(:,:)
         logical, intent(in), optional :: deriv(:)
         real(RD)                      :: interp_kernel(4**rank)
      end function interp_kernel_cubic

   end interface

   interface

   end interface

   ! Access specifiers

   private

   public :: interp_kernel_linear
   public :: data_kernel_cubic
   public :: data_kernel_cubic_cached
   public :: vertex_cache_cubic
   public :: interp_kernel_cubic

   ! Procedures

end module ninterp_m
