! Submodule : comp_range_operate_sm
! Purpose   : Operation routines for comp_range_t
!
! Copyright 2021-2025 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

submodule (comp_range_m) comp_range_operate_sm

   ! Uses

   use stat_m

   ! No implicit typing

   implicit none (type, external)

   ! Procedures

contains

   module procedure unpack

      integer :: j

      @:CHECK_BOUNDS(SIZE(x), self%i_bdy(self%n_ranges+1)-1)

      ! Unpack the range into the array

      ranges_loop: do j = 1, self%n_ranges

         associate (i_a => self%i_bdy(j), &
                    i_b => self%i_bdy(j+1)-1)
           call self%range_elements(j)%range%unpack(x(i_a:i_b))
         end associate
      end do ranges_loop

      ! Finish

      return

   end procedure unpack

   !****

   module procedure subset

      integer                            :: j_min
      integer                            :: j_max
      integer                            :: n_ranges
      type(range_element_t), allocatable :: range_elements(:)
      integer                             :: j
      integer                             :: k_min
      integer                             :: k_max

      ! Subset the range

      if (i_min < 1) then
         if (PRESENT(stat)) then
            stat = STAT_OUT_OF_BOUNDS_RANGE_LO
            return
         else
            @:ABORT('out of bounds (lo) range')
         end if
      end if

      if (i_max > self%i_bdy(self%n_ranges+1)-1) then
         if (PRESENT(stat)) then
            stat = STAT_OUT_OF_BOUNDS_RANGE_HI
            return
         else
            @:ABORT('out of bounds (hi) range')
         end if
      end if

      if (i_max < i_min) then
         if (PRESENT(stat)) then
            stat = STAT_INVALID_ARGUMENT
            return
         else
            @:ABORT('invalid argument')
         end if
      end if

      ! First determine where in ranges i_min and i_max are located

      call locate(self%i_bdy, i_min, j_min)
      call locate(self%i_bdy, i_max, j_max)

      @:ASSERT(j_min >= 1,'out-of-bounds')
      @:ASSERT(j_max <= self%n_ranges,'out-of-bounds')

      ! Create the subset

      n_ranges = j_max - j_min + 1

      range_elements = self%range_elements(j_min:j_max)

      ranges_loop : do j = j_min, j_max

         if (j == j_min) then
            k_min = i_min - self%i_bdy(j) + 1
         else
            k_min = 1
         end if

         if (j == j_max) then
            k_max = i_max - self%i_bdy(j) + 1
         else
            k_max = self%i_bdy(j+1) - self%i_bdy(j)
         end if

         call range_elements(j-j_min+1)%range%subset(k_min, k_max)

      end do ranges_loop

      select type(self)
      type is(comp_range_t)
         self = comp_range_t_elements_(range_elements)
      class default
         @:ABORT('invalid type')
      end select

      ! Finish

      return

   end procedure subset

end submodule comp_range_operate_sm
