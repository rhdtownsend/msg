! Submodule : log_range_operate_sm
! Purpose   : Operation routines for log_range_t
!
! Copyright 2021-2025 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

submodule (log_range_m) log_range_operate_sm

   ! Uses

   use stat_m

   ! No implicit typing

   implicit none (type, external)

   ! Procedures

contains

   module procedure unpack

      integer :: i

      ! Unpack the range into the array

      @:CHECK_BOUNDS(SIZE(x), self%n)

      ! Unpack the range into the array

      do i = 1, self%n
         x(i) = EXP(self%logx_0 + self%dlogx*(i-1))
      end do

      ! Finish

      ! Finish

      return

   end procedure unpack

   !****

   module procedure subset

      ! Subset the range

      if (i_min < 1) then
         if (PRESENT(stat)) then
            stat = STAT_OUT_OF_BOUNDS_RANGE_LO
            return
         else
            @:ABORT('out of bounds (lo) range')
         end if
      end if

      if (i_max > self%n) then
         if (PRESENT(stat)) then
            stat = STAT_OUT_OF_BOUNDS_RANGE_HI
            return
         else
            @:ABORT('out of bounds (hi) range')
         end if
      end if

      if (i_max < i_min) then
         if (PRESENT(stat)) then
            stat = STAT_INVALID_ARGUMENT
            return
         else
            @:ABORT('invalid argument')
         end if
      end if

      select type(self)
      type is(log_range_t)
         self = log_range_t(self%logx_0+self%dlogx*(i_min-1), self%dlogx, i_max-i_min+1)
      class default
         @:ABORT('invalid type')
      end select

      ! Finish

      return

   end procedure subset

end submodule log_range_operate_sm
