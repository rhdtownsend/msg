! Module  : axis_m
! Purpose : Define axis_t type, representing a grid axis
!
! Copyright 2021-2022 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

module axis_m

   ! Uses

   use forum_m, locate_ => locate

   use file_m
   use stat_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none (type, external)

   ! Parameter definitions

   integer, parameter :: LABEL_LEN = 16

   ! Derived-type definitions

   type axis_t
      private
      real(RD), allocatable :: x(:)
      integer               :: n
      character(LABEL_LEN)  :: label
   contains
      private
      procedure, public :: get_n
      procedure, public :: get_x_min
      procedure, public :: get_x_max
      procedure, public :: get_label
      procedure, public :: fetch
      procedure, public :: locate
      procedure, public :: locate_u
      procedure, public :: read
      procedure, public :: write
   end type axis_t

   ! Interfaces

   interface axis_t
      module procedure axis_t_data_
   end interface axis_t

   ! In axis_construct_sm

   interface

      module function axis_t_data_(x, label) result(axis)
         implicit none (type, external)
         real(RD), intent(in)     :: x(:)
         character(*), intent(in) :: label
         type(axis_t)             :: axis
      end function axis_t_data_

   end interface

   ! In axis_attribs_sm

   interface

      module subroutine get_n(self, n)
         implicit none (type, external)
         class(axis_t), intent(in) :: self
         integer, intent(out)      :: n
      end subroutine get_n

      module subroutine get_x_min(self, x_min)
         implicit none (type, external)
         class(axis_t), intent(in) :: self
         real(RD), intent(out)     :: x_min
      end subroutine get_x_min

      module subroutine get_x_max(self, x_max)
         implicit none (type, external)
         class(axis_t), intent(in) :: self
         real(RD), intent(out)     :: x_max
      end subroutine get_x_max

      module subroutine get_label(self, label)
         implicit none (type, external)
         class(axis_t), intent(in)         :: self
         character(LABEL_LEN), intent(out) :: label
      end subroutine get_label

   end interface

   ! In axis_locate_sm

   interface

      module subroutine fetch(self, i, x, stat)
         implicit none (type, external)
         class(axis_t), intent(in)      :: self
         integer, intent(in)            :: i
         real(RD), intent(out)          :: x
         integer, intent(out), optional :: stat
      end subroutine fetch

      module subroutine locate(self, x, i, stat)
         implicit none (type, external)
         class(axis_t), intent(in)       :: self
         real(RD), intent(in)            :: x
         integer, intent(inout)          :: i
         integer, intent(out), optional  :: stat
      end subroutine locate

      module subroutine locate_u(self, x, i, u, stat)
         implicit none (type, external)
         class(axis_t), intent(in)       :: self
         real(RD), intent(in)            :: x
         integer, intent(inout)          :: i
         real(RD), intent(out)           :: u
         integer, intent(out), optional  :: stat
      end subroutine locate_u

   end interface

   ! In axis_io_sm

   interface

      module subroutine read(self, hdf5io, stat)
         implicit none (type, external)
         class(axis_t), intent(out)     :: self
         type(hdf5io_t), intent(inout)  :: hdf5io
         integer, intent(out), optional :: stat
      end subroutine read

      module subroutine write(self, hdf5io, stat)
         implicit none (type, external)
         class(axis_t), intent(in)      :: self
         type(hdf5io_t), intent(inout)  :: hdf5io
         integer, intent(out), optional :: stat
      end subroutine write

   end interface

   ! Access specifiers

   private

   public :: LABEL_LEN
   public :: axis_t

end module axis_m
