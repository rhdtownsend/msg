! Module  : photcache_m
! Purpose : Define photache_t type, for representing a cached
!           table of photint_t's
!
! Copyright 2022 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

module photcache_m

   ! Uses

   use forum_m

   use photint_m
   use photsource_m
   use stat_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none (type, external)

   ! Parameter definitions

   integer(ID), parameter :: INITIAL_LIMIT = 128

   ! Derived-type definitions

   type :: photcache_t
      private
      class(photsource_t), allocatable     :: photsource
      type(photint_element_t), allocatable :: photint_elements(:)
      integer, allocatable                 :: ref_counts(:)
      integer, allocatable                 :: exp_counts(:)
      integer(ID)                          :: ssize
      integer                              :: limit
      integer                              :: n
   contains
      private
      procedure, public :: get_limit
      procedure, public :: get_usage
      procedure, public :: set_limit
      procedure, public :: fetch
      procedure, public :: release
      procedure, public :: flush
      procedure         :: trim_
   end type photcache_t

   type :: photint_element_t
      class(photint_t), allocatable :: photint
   end type photint_element_t

   ! Interfaces

   interface photcache_t
      module procedure photcache_t_
   end interface photcache_t

   ! In photcache_construct_sm

   interface

      module function photcache_t_(n) result(photcache)
         implicit none (type, external)
         integer, intent(in) :: n
         type(photcache_t)   :: photcache
      end function photcache_t_

   end interface

   ! In photcache_attribs_sm

   interface

      module subroutine get_limit(self, limit)
         implicit none (type, external)
         class(photcache_t), intent(in) :: self
         integer, intent(out)           :: limit
      end subroutine get_limit

      module subroutine get_usage(self, usage)
         implicit none (type, external)
         class(photcache_t), intent(in) :: self
         integer, intent(out)           :: usage
      end subroutine get_usage

      module subroutine set_limit(self, limit, stat)
         implicit none (type, external)
         class(photcache_t), intent(inout) :: self
         integer, intent(in)               :: limit
         integer, intent(out), optional    :: stat
      end subroutine set_limit

   end interface

   ! In photcache_access_sm

   interface

      module subroutine fetch(self, i, fetch_proc, photint, stat)
         implicit none (type, external)
         class(photcache_t), target, intent(inout) :: self
         integer, intent(in)                       :: i
         interface
            subroutine fetch_proc(i, photint, stat)
               use photint_m
               implicit none (type, external)
               integer, intent(in)                        :: i
               class(photint_t), allocatable, intent(out) :: photint
               integer, intent(out), optional             :: stat
            end subroutine fetch_proc
         end interface
         class(photint_t), pointer, intent(out) :: photint
         integer, intent(out), optional         :: stat
      end subroutine fetch

      module subroutine release(self, i, stat)
         implicit none (type, external)
         class(photcache_t), target, intent(inout) :: self
         integer, intent(in)                       :: i
         integer, intent(out), optional            :: stat
      end subroutine release

      module subroutine flush(self)
         implicit none (type, external)
         class(photcache_t), intent(inout) :: self
      end subroutine flush

      module subroutine trim_(self)
         implicit none (type, external)
         class(photcache_t), intent(inout) :: self
      end subroutine trim_

   end interface

   ! Access specifiers

   private

   public :: photcache_t

end module photcache_m
