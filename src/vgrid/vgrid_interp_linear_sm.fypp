! Submodule : vgrid_interp_linear_sm
! Purpose   : Linear interpolation routines for vgrid_t
!
! Copyright 2021-2022 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

submodule (vgrid_m:vgrid_interp_sm) vgrid_interp_linear_sm

   ! Uses

   #:if OMP is not None
      use omp_lib
   #:endif

   ! No implicit typing

   implicit none (type, external)

   ! Procedures

contains

   #:for rank, size_F in ((0, ''), (1, '(SIZE(f_int))'))

      module procedure interp_${rank}$_linear_

         #:if defined('GFORTRAN_PR121204')

         interface
            subroutine data_proc(v_seq, data, stat)
               use forum_m
               implicit none (type, external)
               integer, intent(in)            :: v_seq
               real(RD), intent(out)          :: data${ARRAY_SPEC(rank)}$
               integer, intent(out), optional :: stat
            end subroutine data_proc
         end interface

         #:endif

         integer  :: i
         integer  :: c_vec(vgrid%rank)
         real(RD) :: interp_kernel(2**vgrid%rank)
         integer  :: v_vec(vgrid%rank)
         integer  :: v_lin
         integer  :: v_seq
         real(RD) :: F${size_F}$

         ! Initialize f_int

         f_int = 0._RD

         ! Prepare for the interpolation

         call prepare_linear_(vgrid, x_vec, c_vec, interp_kernel, stat, vderiv)
         if (PRESENT(stat)) then
            if (stat /= STAT_OK) return
         end if

         ! Add contributions from each vertex of the cell

         do i = 1, 2**vgrid%rank

            if (interp_kernel(i) /= 0._RD) then

               ! Set up the sequence index for the vertex

               v_vec = c_vec + vgrid%offset_vector_(i, 2)
               @:ASSERT_DEBUG(ALL(v_vec >= 1 .AND. v_vec <= vgrid%shape), 'out-of-bounds v_vec')

               v_lin = vgrid%vert_linear_(v_vec)
               v_seq = vgrid%v_seq_lin(v_lin)

               ! Evaluate data for the vertex

               call data_proc(v_seq, F, stat)
               if (PRESENT(stat)) then
                  if (stat /= STAT_OK) return
               end if

               ! Add the contribution

               f_int = f_int + interp_kernel(i)*F

            end if

         end do

         ! Finish

         if (PRESENT(stat)) stat = STAT_OK

         return

      end procedure interp_${rank}$_linear_

      !****

      module procedure interp_sum_${rank}$_linear_

         #:if defined('GFORTRAN_PR121204')

         interface
            subroutine data_proc(j, v_seq, data, stat)
               use forum_m
               implicit none (type, external)
               integer, intent(in)            :: j
               integer, intent(in)            :: v_seq
               real(RD), intent(out)          :: data${ARRAY_SPEC(rank)}$
               integer, intent(out), optional :: stat
            end subroutine data_proc
         end interface

         #:endif

         logical, save :: check_cancel = .TRUE.
         integer       :: stat_cancel
         integer       :: j
         integer       :: c_vec(vgrid%rank)
         real(RD)      :: interp_kernel(2**vgrid%rank)
         integer       :: i
         integer       :: v_vec(vgrid%rank)
         integer       :: v_lin
         integer       :: v_seq
         real(RD)      :: F${size_F}$

         ! Ensure that OMP cancellation is enabled

         #:if OMP is not None
            if (check_cancel) then
               if (.NOT. omp_get_cancellation()) then
                  if (PRESENT(stat)) then
                     stat = STAT_INVALID_OMP_CONFIG
                     return
                  else
                     @:ABORT('invalid OpenMP configuration (must set OMP_CANCELLATION environment variable to TRUE)')
                  end if
                  check_cancel = .FALSE.
               end if
            end if
         #:endif

         ! Initialize f_int

         f_int = 0._RD

         ! Loop over interpolation points

         stat_cancel = STAT_OK

         !$OMP PARALLEL DO PRIVATE(c_vec, interp_kernel, i, v_vec, v_lin, v_seq, F) REDUCTION(+:f_int) SCHEDULE(STATIC)
         do j = 1, SIZE(x_vec, 2)

            !$OMP CANCELLATION POINT DO

            ! Prepare for the interpolation

            call prepare_linear_(vgrid, x_vec(:,j), c_vec, interp_kernel, stat, vderiv)
            if (PRESENT(stat)) then
               if (stat /= STAT_OK) then
                  stat_cancel = stat
                  !$OMP CANCEL DO
               end if
            end if

            ! Add contributions from each vertex of the cell

            do i = 1, 2**vgrid%rank

               if (interp_kernel(i) /= 0._RD) then

                  ! Set up the sequence index for the vertex

                  v_vec = c_vec + vgrid%offset_vector_(i, 2)
                  @:ASSERT_DEBUG(ALL(v_vec >= 1 .AND. v_vec <= vgrid%shape), 'out-of-bounds v_vec')

                  v_lin = vgrid%vert_linear_(v_vec)
                  v_seq = vgrid%v_seq_lin(v_lin)

                  ! Evaluate data for the vertex

                  call data_proc(j, v_seq, F, stat)
                  if (PRESENT(stat)) then
                     if (stat /= STAT_OK) then
                        stat_cancel = stat
                        !$OMP CANCEL DO
                     end if
                  end if

                  ! Add the contribution

                  f_int = f_int + interp_kernel(i)*F

               end if

            end do

         end do

         ! Finish

         if (PRESENT(stat)) stat = stat_cancel

         return

      end procedure interp_sum_${rank}$_linear_

   #:endfor

   !****

   subroutine prepare_linear_(vgrid, x_vec, c_vec, interp_kernel, stat, vderiv)

      class(vgrid_t), intent(in)     :: vgrid
      real(RD), intent(in)           :: x_vec(:)
      integer, intent(out)           :: c_vec(:)
      real(RD), intent(out)          :: interp_kernel(:)
      integer, intent(out), optional :: stat
      logical, intent(in), optional  :: vderiv(:)

      real(RD) :: u(vgrid%rank)
      real(RD) :: edge_deltas(vgrid%rank)

      @:CHECK_BOUNDS(SIZE(x_vec), vgrid%rank)
      @:CHECK_BOUNDS(SIZE(c_vec), vgrid%rank)
      @:CHECK_BOUNDS(SIZE(interp_kernel), 2**vgrid%rank)

      if (PRESENT(vderiv)) then
         @:CHECK_BOUNDS(SIZE(vderiv), vgrid%rank)
      end if

      ! Prepare for linear interpolation in the cell containing x_vec

      ! Locate the cell

      call locate_cell_(vgrid, x_vec, c_vec, u, edge_deltas, stat)
      if (PRESENT(stat)) then
         if (stat /= STAT_OK) return
      end if

      ! Evaluate the interpolation kernel

      interp_kernel = interp_kernel_linear(vgrid%rank, u, edge_deltas, vderiv)

      ! Finish

      return

   end subroutine prepare_linear_

end submodule vgrid_interp_linear_sm
