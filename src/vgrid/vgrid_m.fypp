! Module  : vgrid_m
! Purpose : Define vgrid_t type, providing support for virtual N-dimensional
!           interpolating grids
!
! Copyright 2021-2023 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

module vgrid_m

   ! Uses

   use forum_m

   use axis_m
   use file_m
   use indexer_m
   use ninterp_m
   use stat_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none (type, external)

   ! Derived-type definitions

   type vgrid_t
      private
      type(axis_t), allocatable :: axes(:)
      type(indexer_t)           :: indexer
      real(RD), allocatable     :: vert_cache(:,:) ! Per-vertex cache
      integer, allocatable      :: shape(:)
      integer                   :: rank
   contains
      private
      procedure, public :: get_rank
      procedure, public :: get_shape
      procedure, public :: get_axis
      procedure, public :: get_n_vert_seq
      procedure, public :: subset
      procedure, public :: remove_verts
      procedure, public :: find_orphans
      procedure         :: interp_0_
      procedure         :: interp_1_
      generic, public   :: interp => interp_0_, interp_1_
      procedure         :: interp_sum_0_
      procedure         :: interp_sum_1_
      generic, public   :: interp_sum => interp_sum_0_, interp_sum_1_
      procedure, public :: adjust_x_vec
      procedure, public :: read
      procedure, public :: write
   end type vgrid_t

   ! Interfaces

   interface vgrid_t
      module procedure vgrid_t_coords_
      module procedure vgrid_t_map_
   end interface vgrid_t

   ! In vgrid_construct_sm

   interface

      module function vgrid_t_coords_(x_vecs, labels) result(vgrid)
         implicit none (type, external)
         real(RD), intent(in)     :: x_vecs(:,:)
         character(*), intent(in) :: labels(:)
         type(vgrid_t)            :: vgrid
      end function vgrid_t_coords_

      module function vgrid_t_mask_(axes, mask) result(vgrid)
         implicit none (type, external)
         type(axis_t), intent(in) :: axes(:)
         logical, intent(in)      :: mask(:)
         type(vgrid_t)            :: vgrid
      end function vgrid_t_mask_

      module function vgrid_t_map_(axes, v_lin_seq) result(vgrid)
         implicit none (type, external)
         type(axis_t), intent(in) :: axes(:)
         integer, intent(in)      :: v_lin_seq(:)
         type(vgrid_t)            :: vgrid
      end function vgrid_t_map_

      module subroutine setup_cache_(vgrid)
         implicit none (type, external)
         type(vgrid_t), intent(inout) :: vgrid
      end subroutine setup_cache_

   end interface

   ! In vgrid_attribs_sm

   interface

      module subroutine get_rank(self, rank)
         implicit none (type, external)
         class(vgrid_t), intent(in) :: self
         integer, intent(out)       :: rank
      end subroutine get_rank

      module subroutine get_shape(self, shape)
         implicit none (type, external)
         class(vgrid_t), intent(in) :: self
         integer, intent(out)       :: shape(:)
      end subroutine get_shape

      module subroutine get_axis(self, i, axis)
         implicit none (type, external)
         class(vgrid_t), intent(in) :: self
         integer, intent(in)        :: i
         type(axis_t), intent(out)  :: axis
      end subroutine get_axis

      module subroutine get_n_vert_seq(self, n_vert_seq)
         implicit none (type, external)
         class(vgrid_t), intent(in) :: self
         integer, intent(out)       :: n_vert_seq
      end subroutine get_n_vert_seq

   end interface

   ! In vgrid_operate_sm

   interface

      module subroutine subset(self, x_min, x_max, vert_mask, dim_mask)
         implicit none (type, external)
         class(vgrid_t), intent(inout)  :: self
         real(RD), intent(in)           :: x_min(:)
         real(RD), intent(in)           :: x_max(:)
         logical, intent(out), optional :: vert_mask(:)
         logical, intent(out), optional :: dim_mask(:)
      end subroutine subset

      module subroutine remove_verts(self, vert_mask)
         implicit none (type, external)
         class(vgrid_t), intent(inout)  :: self
         logical, intent(in)            :: vert_mask(:)
      end subroutine remove_verts

      module subroutine find_orphans(self, vert_mask)
         implicit none (type, external)
         class(vgrid_t), intent(in) :: self
         logical, intent(out)       :: vert_mask(:)
      end subroutine find_orphans

   end interface

   ! In vgrid_interp_sm

   interface

      module subroutine interp_0_(self, data_proc, x_vec, f_int, stat, vderiv, order)
         implicit none (type, external)
         class(vgrid_t), intent(in) :: self
         interface
            subroutine data_proc(v_seq, data, stat)
               use forum_m
               implicit none (type, external)
               integer, intent(in)            :: v_seq
               real(RD), intent(out)          :: data
               integer, intent(out), optional :: stat
            end subroutine data_proc
         end interface
         real(RD), intent(in)           :: x_vec(:)
         real(RD), intent(out)          :: f_int
         integer, intent(out), optional :: stat
         logical, intent(in), optional  :: vderiv(:)
         integer, intent(in), optional  :: order
      end subroutine interp_0_

      module subroutine interp_1_(self, data_proc, x_vec, f_int, stat, vderiv, order)
         implicit none (type, external)
         class(vgrid_t), intent(in) :: self
         interface
            subroutine data_proc(v_seq, data, stat)
               use forum_m
               implicit none (type, external)
               integer, intent(in)            :: v_seq
               real(RD), intent(out)          :: data(:)
               integer, intent(out), optional :: stat
            end subroutine data_proc
         end interface
         real(RD), intent(in)           :: x_vec(:)
         real(RD), intent(out)          :: f_int(:)
         integer, intent(out), optional :: stat
         logical, intent(in), optional  :: vderiv(:)
         integer, intent(in), optional  :: order
      end subroutine interp_1_

      module subroutine interp_sum_0_(self, data_proc, x_vec, f_int, stat, vderiv, order)
         implicit none (type, external)
         class(vgrid_t), intent(in) :: self
         interface
            subroutine data_proc(j, v_seq, data, stat)
               use forum_m
               implicit none (type, external)
               integer, intent(in)            :: j
               integer, intent(in)            :: v_seq
               real(RD), intent(out)          :: data
               integer, intent(out), optional :: stat
            end subroutine data_proc
         end interface
         real(RD), intent(in)           :: x_vec(:,:)
         real(RD), intent(out)          :: f_int
         integer, intent(out), optional :: stat
         logical, intent(in), optional  :: vderiv(:)
         integer, intent(in), optional  :: order
      end subroutine interp_sum_0_

      module subroutine interp_sum_1_(self, data_proc, x_vec, f_int, stat, vderiv, order)
         implicit none (type, external)
         class(vgrid_t), intent(in) :: self
         interface
            subroutine data_proc(j, v_seq, data, stat)
               use forum_m
               implicit none (type, external)
               integer, intent(in)            :: j
               integer, intent(in)            :: v_seq
               real(RD), intent(out)          :: data(:)
               integer, intent(out), optional :: stat
            end subroutine data_proc
         end interface
         real(RD), intent(in)           :: x_vec(:,:)
         real(RD), intent(out)          :: f_int(:)
         integer, intent(out), optional :: stat
         logical, intent(in), optional  :: vderiv(:)
         integer, intent(in), optional  :: order
      end subroutine interp_sum_1_

      module subroutine adjust_x_vec(self, x_vec, dx_vec, x_adj, stat)
         implicit none (type, external)
         class(vgrid_t), intent(in)     :: self
         real(RD), intent(in)           :: x_vec(:)
         real(RD), intent(in)           :: dx_vec(:)
         real(RD), intent(out)          :: x_adj(:)
         integer, intent(out), optional :: stat
      end subroutine adjust_x_vec

   end interface

   ! In vgrid_io_sm

   interface

      module subroutine read(self, hdf5io, stat)
         implicit none (type, external)
         class(vgrid_t), intent(out)    :: self
         type(hdf5io_t), intent(inout)  :: hdf5io
         integer, intent(out), optional :: stat
      end subroutine read

      module subroutine write(self, hdf5io, stat)
         implicit none (type, external)
         class(vgrid_t), intent(in)     :: self
         type(hdf5io_t), intent(inout)  :: hdf5io
         integer, intent(out), optional :: stat
      end subroutine write

   end interface

   ! Access specifiers

   private

   public :: vgrid_t

end module vgrid_m
