! Module  : vgrid_m
! Purpose : Define vgrid_t type, providing support for virtual N-dimensional
!           interpolating grids
!
! Copyright 2021-2023 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

module vgrid_m

   ! Uses
   
   use forum_m

   use axis_m
   use file_m
   use ninterp_m
   use stat_m

   #:if OMP is not None
   use omp_lib
   #:endif

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none (type, external)

   ! Derived-type definitions

   type vgrid_t
      private
      type(axis_t), allocatable :: axes(:)
      real(RD), allocatable     :: vert_cache(:,:) ! Per-vertex cache
      logical, allocatable      :: v_lin_mask(:)   ! Linear vertex mask
      logical, allocatable      :: c_lin_mask(:)   ! Linear cell mask
      integer, allocatable      :: v_seq_lin(:)    ! Vertex linear-to_sequence map
      integer, allocatable      :: v_lin_seq(:)    ! Vertex sequence-to-linear map
      integer, allocatable      :: shape(:)
      integer                   :: rank
      integer                   :: n_v_lin       ! Number of linear vertices
      integer                   :: n_c_lin       ! Number of linear cells
      integer                   :: n_seq         ! Number of sequential vertices
      integer                   :: n_stn         ! Number of stencil points
   contains
      private
      procedure, public :: get_n_seq
      procedure, public :: get_rank
      procedure, public :: get_shape
      procedure, public :: get_axis
      procedure, public :: map
      procedure         :: interp_0_
      procedure         :: interp_1_
      generic, public   :: interp => interp_0_, interp_1_
      procedure, public :: adjust_x_vec
      procedure         :: cell_linear_
      procedure         :: cell_vector_
      procedure         :: vert_linear_
      procedure         :: vert_vector_
      procedure         :: offset_vector_
      procedure, public :: read
      procedure, public :: write
   end type vgrid_t

   ! Interfaces

   interface vgrid_t
      module procedure vgrid_t_coords_
   end interface vgrid_t

   ! In vgrid_construct_sm

   interface

      module function vgrid_t_coords_(x_vecs, labels) result(vgrid)
         implicit none (type, external)
         real(RD), intent(in)     :: x_vecs(:,:)
         character(*), intent(in) :: labels(:)
         type(vgrid_t)            :: vgrid
      end function vgrid_t_coords_

      module function vgrid_t_mask_ (axes, mask) result(vgrid)
         implicit none (type, external)
         type(axis_t), intent(in) :: axes(:)
         logical, intent(in)      :: mask(:)
         type(vgrid_t)            :: vgrid
      end function vgrid_t_mask_

      module function vgrid_t_map_(axes, v_lin_seq) result(vgrid)
         implicit none (type, external)
         type(axis_t), intent(in) :: axes(:)
         integer, intent(in)      :: v_lin_seq(:)
         type(vgrid_t)            :: vgrid
      end function vgrid_t_map_

   end interface

   ! In vgrid_inquire_sm

   interface

      module subroutine get_n_seq(self, n_seq)
         implicit none (type, external)
         class(vgrid_t), intent(in) :: self
         integer, intent(out)       :: n_seq
      end subroutine get_n_seq

      module subroutine get_rank(self, rank)
         implicit none (type, external)
         class(vgrid_t), intent(in) :: self
         integer, intent(out)       :: rank
      end subroutine get_rank

      module subroutine get_shape(self, shape)
         implicit none (type, external)
         class(vgrid_t), intent(in) :: self
         integer, intent(out)       :: shape(:)
      end subroutine get_shape

      module subroutine get_axis(self, i, axis)
         implicit none (type, external)
         class(vgrid_t), intent(in) :: self
         integer, intent(in)        :: i
         type(axis_t), intent(out)  :: axis
      end subroutine get_axis

   end interface

   ! In vgrid_traverse_sm

   interface

      module subroutine map(self, map_proc, stat)
         implicit none (type, external)
         class(vgrid_t), intent(in) :: self
         interface
            subroutine map_proc(v_seq, stat)
               integer, intent(in)            :: v_seq
               integer, intent(out), optional :: stat
            end subroutine map_proc
         end interface
         integer, intent(out), optional :: stat
      end subroutine map

   end interface

   ! In vgrid_interp_sm

   interface

      module subroutine interp_0_(self, data_proc, x_vec, f_int, stat, vderiv, order)
         implicit none (type, external)
         class(vgrid_t), intent(in) :: self
         interface
            subroutine data_proc(v_seq, data, stat)
               use forum_m
               integer, intent(in)            :: v_seq
               real(RD), intent(out)          :: data
               integer, intent(out), optional :: stat
            end subroutine data_proc
         end interface
         real(RD), intent(in)           :: x_vec(:)
         real(RD), intent(out)          :: f_int
         integer, intent(out), optional :: stat
         logical, intent(in), optional  :: vderiv(:)
         integer, intent(in), optional  :: order
      end subroutine interp_0_

      module subroutine interp_1_(self, data_proc, x_vec, f_int, stat, vderiv, order)
         implicit none (type, external)
         class(vgrid_t), intent(in) :: self
         interface
            subroutine data_proc(v_seq, data, stat)
               use forum_m
               integer, intent(in)            :: v_seq
               real(RD), intent(out)          :: data(:)
               integer, intent(out), optional :: stat
            end subroutine data_proc
         end interface
         real(RD), intent(in)           :: x_vec(:)
         real(RD), intent(out)          :: f_int(:)
         integer, intent(out), optional :: stat
         logical, intent(in), optional  :: vderiv(:)
         integer, intent(in), optional  :: order
      end subroutine interp_1_

      module subroutine adjust_x_vec(self, x_vec, dx_vec, x_adj, stat)
         implicit none (type, external)
         class(vgrid_t), intent(in)     :: self
         real(RD), intent(in)           :: x_vec(:)
         real(RD), intent(in)           :: dx_vec(:)
         real(RD), intent(out)          :: x_adj(:)
         integer, intent(out), optional :: stat
      end subroutine adjust_x_vec

   end interface

   ! In vgrid_index_sm

   interface

      module function cell_linear_(self, c_vec) result(c_lin)
         implicit none (type, external)
         class(vgrid_t), intent(in) :: self
         integer, intent(in)        :: c_vec(:)
         integer                    :: c_lin
      end function cell_linear_

      module function cell_vector_(self, c_lin) result(c_vec)
         implicit none (type, external)
         class(vgrid_t), intent(in) :: self
         integer, intent(in)        :: c_lin
         integer                    :: c_vec(self%rank)
      end function cell_vector_

      module function vert_linear_(self, v_vec) result(v_lin)
         implicit none (type, external)
         class(vgrid_t), intent(in) :: self
         integer, intent(in)        :: v_vec(:)
         integer                    :: v_lin
      end function vert_linear_

      module function vert_vector_(self, v_lin) result(v_vec)
         implicit none (type, external)
         class(vgrid_t), intent(in) :: self
         integer, intent(in)        :: v_lin
         integer                    :: v_vec(self%rank)
      end function vert_vector_

      module function offset_vector_(self, i, n) result(d_vec)
         implicit none (type, external)
         class(vgrid_t), intent(in) :: self
         integer, intent(in)        :: i
         integer, intent(in)        :: n
         integer                    :: d_vec(self%rank)
      end function offset_vector_

   end interface

   ! In vgrid_io_sm

   interface

      module subroutine read(self, hdf5io, stat)
         implicit none (type, external)
         class(vgrid_t), intent(out)    :: self
         type(hdf5io_t), intent(inout)  :: hdf5io
         integer, intent(out), optional :: stat
      end subroutine read

      module subroutine write(self, hdf5io, stat)
         implicit none (type, external)
         class(vgrid_t), intent(in)     :: self
         type(hdf5io_t), intent(inout)  :: hdf5io
         integer, intent(out), optional :: stat
      end subroutine write

   end interface

   ! Access specifiers

   private

   public :: vgrid_t
   public :: optimize

   ! Procedures

contains

   subroutine optimize(x_vecs, mask)

      real(RD), intent(in) :: x_vecs(:,:)
      logical, intent(out) :: mask(:)

      integer                   :: rank
      character(1), allocatable :: labels(:)
      type(vgrid_t)             :: vgrid
      integer                   :: c_lin
      integer, allocatable      :: c_vec(:)
      integer, allocatable      :: v_vec(:)
      integer                   :: i
      integer                   :: v_lin
      integer                   :: v_seq

      @:CHECK_BOUNDS(SIZE(mask), SIZE(x_vecs, 2))

      ! Optimize grid construction by returning a mask that indicates
      ! which vertices in x_vecs are usable (the remainder do not
      ! belong to complete interpolation cells, and therefore can be
      ! discarded)

      ! Start by creating a dummy vgrid

      rank = SIZE(x_vecs, 1)

      allocate(labels(rank))
      labels = ''

      vgrid = vgrid_t(x_vecs, labels)

      ! Update rank (to handle removal of degenerate axes)

      call vgrid%get_rank(rank)

      ! Loop through cells of the grid

      allocate(c_vec(rank))
      allocate(v_vec(rank))

      mask = .FALSE.

      do c_lin = 1, vgrid%n_c_lin

         ! Check if the cell is complete

         if (vgrid%c_lin_mask(c_lin)) then

            c_vec = vgrid%cell_vector_(c_lin)

            ! Iterate over corner vertices of the cell

            do i = 1, 2**rank

               v_vec = c_vec + vgrid%offset_vector_(i, 2)
               @:ASSERT_DEBUG(ALL(v_vec >= 1 .AND. v_vec <= vgrid%shape), 'out-of-bounds v_vec')

               v_lin = vgrid%vert_linear_(v_vec)
               v_seq = vgrid%v_seq_lin(v_lin)

               ! Update the mask

               mask(v_seq) = .TRUE.

            end do

         endif

      end do

      ! Finish

      return

   end subroutine optimize

end module vgrid_m
