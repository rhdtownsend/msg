! Module   : make_passband
! Purpose  : create passband files from ASCII tables
!
! Copyright 2021-2022 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

program make_passband

   ! Uses

   use forum_m
   use msg_m

   use arg_parser_m
   use tools_utils_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none (type, external)

   ! Variables

   character(:), allocatable :: input_file_name
   character(:), allocatable :: zero_point
   character(:), allocatable :: output_file_name

   type(arg_parser_t)    :: arg_parser
   integer               :: unit
   integer               :: n
   real(RD), allocatable :: lam(:)
   real(RD), allocatable :: S(:)
   integer               :: i
   real(RD)              :: F_0
   type(passband_t)      :: passband
   type(hdf5io_t)        :: hdf5io

   ! Read command-line arguments

   ! Parse command-line arguments

   arg_parser = arg_parser_t()

   call arg_parser%define_option('zero_point', OPT_REQUIRED_ARG)

   call arg_parser%parse(arg_proc, opt_proc)

   if (.NOT. allocated(input_file_name)) call synopsis()
   if (.NOT. allocated(zero_point)) call synopsis()
   if (.NOT. allocated(output_file_name)) call synopsis()

   ! Read the input file

   open(NEWUNIT=unit, STATUS='OLD', FILE=input_file_name)

   n = 0

   count_loop : do
      read(unit, *, END=100)
      n = n + 1
   end do count_loop

100 continue

   rewind(unit)

   allocate(lam(n))
   allocate(S(n))

   read_loop : do i = 1, n
      read(unit, *) lam(i), S(i)
   end do read_loop

   close(unit)

   ! Create the passband

   @:ASSERT(ALLOCATED(zero_point), '--zero-point must be specified')

   read(zero_point, *) F_0

   passband = passband_t(S, lam, F_0)

   ! Write the output file

   hdf5io = hdf5io_t(output_file_name, CREATE_FILE)
   call passband%write(hdf5io)
   call hdf5io%final()

   ! Finish

contains

   subroutine arg_proc(a, value)

      integer, intent(in)      :: a
      character(*), intent(in) :: value

      select case(a)
      case(1)
         input_file_name = value
      case(2)
         output_file_name = value
      case default
         call synopsis()
      end select

   end subroutine arg_proc

   !****

   subroutine opt_proc(name, value)

      character(*), intent(in) :: name
      character(*), intent(in) :: value

      select case(name)
      case('zero_point')
         zero_point = value
      case default
         @:ABORT('invalid option name')
      end select

   end subroutine opt_proc

   !****

   subroutine synopsis()

      write(OUTPUT_UNIT, *) 'Synopsis: make_passband <input_file_name> <output_file_name> [options]'
      stop

   end subroutine synopsis

end program make_passband
