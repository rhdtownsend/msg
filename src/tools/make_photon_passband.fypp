! Module   : make_photon_passband
! Purpose  : create a photon-counting passband
!
! Copyright 2023 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

program make_photon_passband

   ! Uses

   use forum_m
   use msg_m

   use cubint_m
   use tools_utils_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none (type, external)

   ! Variables

   character(:), allocatable :: passband_file_name
   real(RD), allocatable     :: lam_min
   real(RD), allocatable     :: lam_max

   type(arg_parser_t) :: arg_parser
   type(cubint_t)     :: cubint
   real(RD)           :: Delta
   real(RD)           :: F_0
   type(passband_t)   :: passband
   type(hdf5io_t)     :: hdf5io

   ! Parse command-line arguments

   arg_parser = arg_parser_t('make_photon_passband PASSBAND_FILE', auto_help=.TRUE.)

   call arg_parser%define_option('lambda-min', OPT_REQUIRED_ARG, &
      usage='--lamda-min=MIN', description='minimum wavelength')
   call arg_parser%define_option('lambda-max', OPT_REQUIRED_ARG, &
      usage='--lamda-max=MAX', description='maximum wavelength')

   call arg_parser%parse(arg_proc, opt_proc)

   if (.NOT. allocated(passband_file_name)) call print_summary()

   if (.NOT. ALLOCATED(lam_min)) then
      @:STOP('--lambda-min must be specified')
   end if

   if (.NOT. ALLOCATED(lam_max)) then
      @:STOP('--lambda-max must be specified')
   end if

   ! Create the cubic interpolant (a straight line)

   cubint = cubint_t([lam_min, lam_max], [lam_min, lam_max], [1._RD, 1._RD])

   ! Evaluate the normalizing flux

   Delta = cubint%integ(lam_max) - cubint%integ(lam_min)

   F_0 = H_PLANCK*C_LIGHT*1E8_RD/Delta

   ! Create the passband

   passband = passband_t(cubint, F_0)

   ! Write the output file

   hdf5io = hdf5io_t(passband_file_name, CREATE_FILE)
   call passband%write(hdf5io)
   call hdf5io%final()

   ! Finish

contains

   subroutine arg_proc(a, value)

      integer, intent(in)      :: a
      character(*), intent(in) :: value

      select case(a)
      case(1)
         passband_file_name = value
      case default
         call print_summary()
      end select

   end subroutine arg_proc

   !****

   subroutine opt_proc(name, value)

      character(*), intent(in) :: name
      character(*), intent(in) :: value

      integer :: stat

      stat = STAT_OK

      select case(name)
      case('lambda-min')
         call parse_value(value, lam_min, stat)
      case('lambda-max')
         call parse_value(value, lam_max, stat)
      case('help')
         call print_summary()
      case default
         @:ABORT('invalid option name')
      end select

      if (stat /= STAT_OK) then
         @:STOP('invalid --'//name)
      end if

   end subroutine opt_proc

   !****

   subroutine print_summary()

      call arg_parser%print_summary()
      @:STOP()

   end subroutine print_summary

end program make_photon_passband
