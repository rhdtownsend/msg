! Module   : subset_specgrid
! Purpose  : Subset a specgrid file
!
! Copyright 2021-2025 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

program subset_specgrid

   ! Uses

   use forum_m
   use msg_m

   use tools_utils_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none (type, external)

   ! Variables

   character(:), allocatable :: input_file_name
   character(:), allocatable :: output_file_name
   real(RD), allocatable     :: lam_min
   real(RD), allocatable     :: lam_max
   character(:), allocatable :: param_ranges(:)
   logical, allocatable      :: remove_orphans
   character(:), allocatable :: grid_label

   type(arg_parser_t)                :: arg_parser
   type(hdf5io_t)                    :: hdf5io
   type(specgrid_t)                  :: specgrid
   real(RD)                          :: grid_lam_min
   real(RD)                          :: grid_lam_max
   integer                           :: rank
   character(LABEL_LEN), allocatable :: labels(:)
   real(RD), allocatable             :: x_min(:)
   real(RD), allocatable             :: x_max(:)
   integer                           :: r
   type(axis_t)                      :: axis
   integer                           :: i
   character(:), allocatable         :: range_label
   real(RD), allocatable             :: range_min
   real(RD), allocatable             :: range_max
   integer                           :: stat

   ! Parse command-line arguments

   remove_orphans = .FALSE.

   arg_parser = arg_parser_t('subset_specgrid INPUT_FILE OUTPUT_FILE', auto_help=.TRUE.)

   call arg_parser%define_option('lambda-min', OPT_REQUIRED_ARG, &
      usage='--lamda-min=MIN', description='minimum wavelength')
   call arg_parser%define_option('lambda-max', OPT_REQUIRED_ARG, &
      usage='--lamda-max=MAX', description='maximum wavelength')
   call arg_parser%define_option('parameter-range', OPT_REQUIRED_ARG, 'p', &
      usage='--parameter-range=NAME:MIN:MAX', description='photospheric parameter range')
   call arg_parser%define_option('remove-orphans', OPT_NO_ARG, 'r', &
      description='remove orphaned vertices')
   call arg_parser%define_option('grid-label', OPT_REQUIRED_ARG, short_name='l', &
      usage='--grid-label=NAME', description='grid label')

   call arg_parser%parse(arg_proc, opt_proc)

   if (.NOT. ALLOCATED(input_file_name)) call print_summary()
   if (.NOT. ALLOCATED(output_file_name)) call print_summary()

   ! Read the input specgrid

   hdf5io = hdf5io_t(input_file_name, OPEN_FILE_RO)

   call specgrid%read(hdf5io)

   if (hdf5io%attr_exists('label') .AND. .NOT. ALLOCATED(grid_label)) then
      allocate(character(1024)::grid_label)
      call hdf5io%read_attr('label', grid_label)
   end if

   call hdf5io%final()

   ! Determine the wavelength range

   call specgrid%get_lam_min(grid_lam_min)
   call specgrid%get_lam_max(grid_lam_max)

   if (ALLOCATED(lam_min)) then
      lam_min = MAX(lam_min, grid_lam_min)
   else
      lam_min = grid_lam_min
   end if

   if (ALLOCATED(lam_max)) then
      lam_max = MIN(lam_max, grid_lam_max)
   else
      lam_max = grid_lam_max
   end if

   if (lam_max < lam_min) then
      @:STOP('invalid wavelength range')
   end if

   ! Extract the axis labels and ranges

   call specgrid%get_rank(rank)

   allocate(labels(rank))

   allocate(x_min(rank))
   allocate(x_max(rank))

   do r = 1, rank

      call specgrid%get_axis(r, axis)

      call axis%get_label(labels(r))

      call axis%get_x_min(x_min(r))
      call axis%get_x_max(x_max(r))

   end do

   ! Determine the subset ranges

   if (ALLOCATED(param_ranges)) then

      do i = 1, SIZE(param_ranges)

         call parse_name_values(param_ranges(i), range_label, range_min, range_max, stat)
         if (stat /= STAT_OK) then
            @:STOP('invalid --parameter-range')
         end if

         r = FINDLOC(labels, range_label, DIM=1)

         if (r > 0) then

            x_min(r) = MAX(x_min(r), range_min)
            x_max(r) = MIN(x_max(r), range_max)

         else

            @:STOP('unrecognized name in --parameter-range')

         end if

      end do

   end if

   ! Perform the subsetting

   call specgrid%set_cache_lam_min(lam_min)
   call specgrid%set_cache_lam_max(lam_max)

   call specgrid%subset(x_min, x_max)

   ! If necessary, remove orphans

   if (remove_orphans) call specgrid%remove_orphans()

   ! Write the output specgrid

   call specgrid%set_cache_limit(0)

   hdf5io = hdf5io_t(output_file_name, CREATE_FILE)

   call specgrid%write(hdf5io)

   if (ALLOCATED(grid_label)) then
      call hdf5io%write_attr('label', grid_label)
   end if

   call hdf5io%final()

   ! Finish

contains

   subroutine arg_proc(a, value)

      integer, intent(in)      :: a
      character(*), intent(in) :: value

      select case(a)
      case(1)
         input_file_name = value
      case(2)
         output_file_name = value
      case default
         call print_summary()
      end select

   end subroutine arg_proc

   !****

   subroutine opt_proc(name, value)

      character(*), intent(in) :: name
      character(*), intent(in) :: value

      integer :: stat

      stat = STAT_OK

      select case(name)
      case('lambda-min')
         call parse_value(value, lam_min, stat)
      case('lambda-max')
         call parse_value(value, lam_max, stat)
      case('parameter-range')
         call append_string(param_ranges, value)
      case('remove-orphans')
         remove_orphans = .TRUE.
      case('grid-label')
         grid_label = value
      case('help')
         call print_summary()
      case default
         @:ABORT('invalid option name')
      end select

      if (stat /= STAT_OK) then
         @:STOP('invalid --'//name)
      end if

   end subroutine opt_proc

   !****

   subroutine print_summary()

      call arg_parser%print_summary()
      @:STOP()

   end subroutine print_summary

end program subset_specgrid
