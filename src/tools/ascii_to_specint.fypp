! Module   : ascii_to_specint
! Purpose  : create a specint file from an ASCII file
!
! Copyright 2022 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

program ascii_to_specint

   ! Uses

   use forum_m
   use msg_m

   use tools_utils_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none (type, external)

   ! Variables

   character(:), allocatable :: input_file_name
   character(:), allocatable :: output_file_name
   character(:), allocatable :: lam_units
   character(:), allocatable :: flux_units
   character(:), allocatable :: labels(:)

   type(arg_parser_t)        :: arg_parser
   real(RD), allocatable     :: lam(:)
   real(RD), allocatable     :: F(:)
   integer                   :: n_lam
   real(RD), allocatable     :: I(:,:)
   type(limb_specint_t)      :: specint
   type(hdf5io_t)            :: hdf5io
   type(hdf5io_t)            :: hdf5io_labels
   integer                   :: j
   character(:), allocatable :: name
   real(RD)                  :: value

   ! Parse command-line arguments

   lam_units = 'A'
   flux_units = 'erg/cm^2/s/A'

   arg_parser = arg_parser_t()

   call arg_parser%define_option('lam_units', OPT_REQUIRED_ARG)
   call arg_parser%define_option('flux_units', OPT_REQUIRED_ARG)
   call arg_parser%define_option('label', OPT_REQUIRED_ARG)

   call arg_parser%parse(arg_proc, opt_proc)

   if (.NOT. allocated(input_file_name)) call synopsis()
   if (.NOT. allocated(output_file_name)) call synopsis()

   ! Read data from the input file

   call read_ascii_file(input_file_name, lam_units, flux_units, lam, F)

   ! Set up the bin-averaged intensity

   n_lam = SIZE(F)

   allocate(I(1,n_lam-1))

   I(1,:) = 0.5*(F(:n_lam-1) + F(2:))/PI

   ! Create specint

   specint = limb_specint_t(I, [1._RD], tab_range_t(lam), limb_t('CONST'), precise=.FALSE.)

   ! Write it (together with the labels)

   hdf5io = hdf5io_t(output_file_name, CREATE_FILE)

   call specint%write(hdf5io)

   hdf5io_labels = hdf5io_t(hdf5io, 'labels')

   if (ALLOCATED(labels)) then
      do j = 1, SIZE(labels)
         call parse_name_value(labels(j), name, value)
         call hdf5io_labels%write_attr(name, value)
      end do
   end if

   call hdf5io_labels%final()

   call hdf5io%final()

   ! Finish

contains

   subroutine arg_proc(a, value)

      integer, intent(in)      :: a
      character(*), intent(in) :: value

      select case(a)
      case(1)
         input_file_name = value
      case(2)
         output_file_name = value
      case default
         call synopsis()
      end select

   end subroutine arg_proc

   !****

   subroutine opt_proc(name, value)

      character(*), intent(in) :: name
      character(*), intent(in) :: value

      select case(name)
      case('lam_units')
         lam_units = value
      case('flux_units')
         flux_units = value
      case('label')
         call append_string(labels, value)
      case default
         @:ABORT('invalid option name')
      end select

   end subroutine opt_proc

   !****

   subroutine synopsis()

      write(OUTPUT_UNIT, *) 'Synopsis: ascii_to_specint <input_file_name> <output_file_name> [options]'
      stop

   end subroutine synopsis

   !****

   subroutine read_ascii_file(file_name, lam_units, flux_units, lam, F)

      character(*), intent(in)           :: file_name
      character(*), intent(in)           :: lam_units
      character(*), intent(in)           :: flux_units
      real(RD), allocatable, intent(out) :: lam(:)
      real(RD), allocatable, intent(out) :: F(:)

      integer         :: unit
      integer         :: d_lam
      integer         :: n_lam
      character(1024) :: line

      ! Open the input file

      open(NEWUNIT=unit, FILE=file_name, STATUS='OLD')

      ! Read in the wavelength and flux data

      d_lam = 1024

      allocate(lam(d_lam))
      allocate(F(d_lam))

      n_lam = 0

      read_loop : do

         ! Read a line of data

         read(unit, 100, END=200) line
100      format(A)

         if (line == '' .OR. line(1:1) == '#') cycle read_loop

         ! If necessary, expand arrays

         n_lam = n_lam + 1

         if(n_lam > d_lam) then
            d_lam = d_lam*2
            call reallocate(lam, [d_lam])
            call reallocate(F, [d_lam])
         endif

         ! Store the data

         read(line, *) lam(n_lam), F(n_lam)

      end do read_loop

200   continue

      close(unit)

      d_lam = n_lam

      call reallocate(lam, [d_lam])
      call reallocate(F, [d_lam])

      ! Convert units

      select case(lam_units)
      case('A')
      case('micron')
         lam = lam*1E4_RD
      case default
         @:ABORT('Invalid lam_units')
      end select

      select case(flux_units)
      case('erg/cm^2/s/A')
      case('W/m^2/m')
         F = F*1E-7_RD
      case default
         @:ABORT('Invalid flux_units')
      end select

      ! Finish

      return

   end subroutine read_ascii_file

end program ascii_to_specint
