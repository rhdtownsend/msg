! Module   : make_bb_photgrid
! Purpose  : Create a blackbody/bolometric photgrid file
!
! Copyright 2021 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

program make_bb_photgrid

   ! Uses

   use forum_m
   use msg_m

   use tools_utils_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none (type, external)

   ! Variables

   character(:), allocatable :: photgrid_file_name
   real(RD), allocatable     :: logT_min
   real(RD), allocatable     :: logT_max
   integer, allocatable      :: n_logT
   real(RD), allocatable     :: u_limb
   real(RD), allocatable     :: lambda
   character(:), allocatable :: grid_label

   type(arg_parser_t)                :: arg_parser
   real(RD), allocatable             :: x_vecs(:,:)
   integer                           :: i_logT
   type(vgrid_t)                     :: vgrid
   real(RD)                          :: mu(2)
   real(RD)                          :: f_mu(2)
   type(limb_t)                      :: limb
   type(limb_photint_t), allocatable :: photints(:)
   real(RD)                          :: T
   real(RD)                          :: I(2)
   type(mem_photsource_t)            :: photsource
   type(photgrid_t)                  :: photgrid
   type(hdf5io_t)                    :: hdf5io

   ! Parse command-line arguments

   u_limb = 0._RD

   arg_parser = arg_parser_t('make_bb_photgrid PHOTGRID_FILE', auto_help=.TRUE.)

   call arg_parser%define_option('logT-min', OPT_REQUIRED_ARG, &
      usage='--logT-min=MIN', description='minimum log(T)')
   call arg_parser%define_option('logT-max', OPT_REQUIRED_ARG, &
      usage='--logT-max=MAX', description='maximum log(T)')
   call arg_parser%define_option('n-logT', OPT_REQUIRED_ARG, &
      usage='--n-logT=N', description='number of log(T) values')
   call arg_parser%define_option('u-limb', OPT_REQUIRED_ARG, &
      usage='--u-limb=U', description='linear limb-darkening coefficient')
   call arg_parser%define_option('lambda', OPT_REQUIRED_ARG, &
      usage='--lambda=VALUE', description='wavelength sample point')
   call arg_parser%define_option('grid-label', OPT_REQUIRED_ARG, short_name='l', &
      usage='--grid-label=NAME', description='grid label')

   call arg_parser%parse(arg_proc, opt_proc)

   if (.NOT. ALLOCATED(photgrid_file_name)) call print_summary()

   if (.NOT. ALLOCATED(logT_min)) then
      @:STOP('--logT-min must be specified')
   end if

   if (.NOT. ALLOCATED(logT_max)) then
      @:STOP('--logT-max must be specified')
   end if

   if (.NOT. ALLOCATED(n_logT)) then
      @:STOP('--n-logT must be specified')
   end if

   ! Create the vertex coordinates

   allocate(x_vecs(1,n_logT))

   do i_logT = 1, n_logT

      x_vecs(1,i_logT) = (logT_min*(n_logT-i_logT) + logT_max*(i_logT-1))/(n_logT-1)

   end do

   ! Create the vgrid

   vgrid = vgrid_t(x_vecs, ['log(T)'])

   ! Set up limb-darkening data

   mu = [0._RD, 1._RD]
   f_mu = (1._RD - u_limb*(1._RD - mu))/(1._RD - u_limb/3._RD)

   limb = limb_t('LINEAR')

   ! Create the photints

   allocate(photints(n_logT))

   do i_logT = 1, n_logT

      T = 10**x_vecs(1,i_logT)

      if (ALLOCATED(lambda)) then

         ! Planck function evaluated at lambda

         associate (lambda => lambda*1E-8_RD)
            I = 2._RD*H_PLANCK*C_LIGHT**2/lambda**5/ &
               (EXP(H_PLANCK*C_LIGHT/(lambda*K_BOLTZMANN*T)) - 1._RD) * f_mu
         end associate

      else

         ! Bolometric Planck function

         I = (SIGMA_STEFAN/PI)*T**4 * f_mu

      end if

      photints(i_logT) = limb_photint_t(I, mu, limb)

   end do

   ! Create the photsource

   photsource = mem_photsource_t(photints)

   ! Create the photgrid

   photgrid = photgrid_t(photsource, vgrid)

   ! Write the output file

   hdf5io = hdf5io_t(photgrid_file_name, CREATE_FILE)

   call photgrid%write(hdf5io)

   if (ALLOCATED(grid_label)) then
      call hdf5io%write_attr('label', grid_label)
   end if

   call hdf5io%final()

   ! Finish

contains

   subroutine arg_proc(a, value)

      integer, intent(in)      :: a
      character(*), intent(in) :: value

      select case(a)
      case(1)
         photgrid_file_name = value
      case default
         call print_summary()
      end select

   end subroutine arg_proc

   !****

   subroutine opt_proc(name, value)

      character(*), intent(in) :: name
      character(*), intent(in) :: value

      integer :: stat

      stat = STAT_OK

      select case(name)
      case('logT-min')
         call parse_value(value, logT_min, stat)
      case('logT-max')
         call parse_value(value, logT_max, stat)
      case('n-logT')
         call parse_value(value, n_logT, stat)
      case('u-limb')
         call parse_value(value, u_limb, stat)
      case('lambda')
         call parse_value(value, lambda, stat)
      case('grid-label')
         grid_label = value
      case('help')
         call print_summary()
      case default
         @:ABORT('invalid option name')
      end select

      if (stat /= STAT_OK) then
         @:STOP('invalid --'//name)
      end if

   end subroutine opt_proc

   subroutine print_summary()

      call arg_parser%print_summary()
      @:STOP()

   end subroutine print_summary

end program make_bb_photgrid
