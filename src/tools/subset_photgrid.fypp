! Module   : subset_photgrid
! Purpose  : Subset a photgrid file
!
! Copyright 2021-2023 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

program subset_photgrid

   ! Uses

   use forum_m
   use msg_m

   use arg_parser_m
   use tools_utils_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none (type, external)

   ! Variables

   character(:), allocatable  :: input_file_name
   character(:), allocatable  :: output_file_name
   character(:), allocatable  :: param_ranges(:)
   logical                    :: remove_orphans

   type(arg_parser_t)        :: arg_parser
   type(hdf5io_t)            :: hdf5io
   type(photgrid_t)          :: photgrid
   integer                   :: rank
   real(RD), allocatable     :: x_min(:)
   real(RD), allocatable     :: x_max(:)
   integer                   :: r
   type(axis_t)              :: axis
   character(LABEL_LEN)      :: label
   integer                   :: i
   character(:), allocatable :: range_label
   real(RD)                  :: range_min
   real(RD)                  :: range_max

   ! Parse command-line arguments

   remove_orphans = .FALSE.

   arg_parser = arg_parser_t()

   call arg_parser%define_option('param-range', OPT_REQUIRED_ARG)
   call arg_parser%define_option('remove-orphans', OPT_NO_ARG)

   call arg_parser%parse(arg_proc, opt_proc)

   if (.NOT. allocated(input_file_name)) call synopsis()
   if (.NOT. allocated(output_file_name)) call synopsis()

   ! Read the input photgrid

   hdf5io = hdf5io_t(input_file_name, OPEN_FILE_RO)
   call photgrid%read(hdf5io)
   call hdf5io%final()

   ! Determine the axis ranges

   call photgrid%get_rank(rank)

   allocate(x_min(rank))
   allocate(x_max(rank))

   do r = 1, rank

      call photgrid%get_axis(r, axis)

      call axis%get_label(label)

      call axis%get_x_min(x_min(r))
      call axis%get_x_max(x_max(r))

      ! See if a range is defined for this axis

      if (ALLOCATED(param_ranges)) then

         do i = 1, SIZE(param_ranges)
            call parse_name_values(param_ranges(i), range_label, range_min, range_max)
            if (range_label == label) then
               x_min(r) = MAX(x_min(r), range_min)
               x_max(r) = MIN(x_max(r), range_max)
               exit
            end if
         end do

      end if

   end do

   ! Perform the subsetting

   call photgrid%subset(x_min, x_max)

   ! If necessary, remove orphans

   if (remove_orphans) call photgrid%remove_orphans()

   ! Write the output photgrid

   call photgrid%set_cache_limit(0)

   hdf5io = hdf5io_t(output_file_name, CREATE_FILE)
   call photgrid%write(hdf5io)
   call hdf5io%final()

   ! Finish

contains

   subroutine arg_proc(a, value)

      integer, intent(in)      :: a
      character(*), intent(in) :: value

      select case(a)
      case(1)
         input_file_name = value
      case(2)
         output_file_name = value
      case default
         call synopsis()
      end select

   end subroutine arg_proc

   !****

   subroutine opt_proc(name, value)

      character(*), intent(in) :: name
      character(*), intent(in) :: value

      select case(name)
      case('param-range')
         call append_string(param_ranges, value)
      case('remove-orphans')
         remove_orphans = .TRUE.
      case default
         @:ABORT('invalid option name')
      end select

   end subroutine opt_proc

   !****

   subroutine synopsis()

      write(OUTPUT_UNIT, *) 'Synopsis: subset_photgrid <input_file_name> <output_file_name> [options]'
      stop

   end subroutine synopsis

end program subset_photgrid
