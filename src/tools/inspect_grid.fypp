! Program : inspect_grid
! Purpose : inspect a grid file
!
! Copyright 2023 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

program inspect_grid

   ! Uses

   use forum_m
   use msg_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none (type, external)

   ! Variables

   character(:), allocatable :: grid_file_name
   logical, allocatable      :: show_type
   logical, allocatable      :: show_label
   logical, allocatable      :: show_axes
   logical, allocatable      :: show_lam

   type(arg_parser_t) :: arg_parser
   type(hdf5io_t)     :: hdf5io
   character(1024)    :: grid_label
   type(specgrid_t)   :: specgrid
   type(photgrid_t)   :: photgrid
   integer            :: stat

   ! Parse command-line arguments

   show_type = .FALSE.
   show_label = .FALSE.
   show_axes = .FALSE.
   show_lam = .FALSE.

   arg_parser = arg_parser_t('inspect_grid GRID_FILE', auto_help=.TRUE.)

   call arg_parser%define_option('type', OPT_NO_ARG, short_name='t', &
      description='show grid type')
   call arg_parser%define_option('grid-label', OPT_NO_ARG, short_name='l', &
      description='show grid label')
   call arg_parser%define_option('axes', OPT_NO_ARG, short_name='x', &
      description='show axes data')
   call arg_parser%define_option('lambda', OPT_NO_ARG, &
      description='show wavelength data')
   call arg_parser%define_option('all', OPT_NO_ARG, short_name='a', &
      description='show everything')

   call arg_parser%parse(arg_proc, opt_proc)

   if (.NOT. ALLOCATED(grid_file_name)) call print_summary()

   ! Read the grid & dispatch to the appropriate routine

   hdf5io = hdf5io_t(grid_file_name, OPEN_FILE_RO)

   read_block: block

      call specgrid%read(hdf5io, stat)

      if (stat == STAT_OK) then

         if (hdf5io%attr_exists('label')) then
            call hdf5io%read_attr('label', grid_label)
         else
            grid_label = ''
         end if

         call inspect_specgrid(specgrid, grid_label)

         exit read_block

      end if

      call photgrid%read(hdf5io, stat)

      if (stat == STAT_OK) then

         if (hdf5io%attr_exists('label')) then
            call hdf5io%read_attr('label', grid_label)
         else
            grid_label = ''
         end if

         call inspect_photgrid(photgrid, grid_label)

         exit read_block

      end if

      call hdf5io%final()
      @:STOP('unable to determine file type')

   end block read_block

   call hdf5io%final()

   ! Finish

contains

   subroutine arg_proc(a, value)

      integer, intent(in)      :: a
      character(*), intent(in) :: value

      select case(a)
      case(1)
         grid_file_name = value
      case default
         call print_summary()
      end select

   end subroutine arg_proc

   !****

   subroutine opt_proc(name, value)

      character(*), intent(in) :: name
      character(*), intent(in) :: value

      integer :: stat

      stat = STAT_OK

      select case(name)
      case('type')
         show_type = .TRUE.
      case('grid-label')
         show_label = .TRUE.
      case('axes')
         show_axes = .TRUE.
      case('lambda')
         show_lam = .TRUE.
      case('all')
         show_type = .TRUE.
         show_label = .TRUE.
         show_axes = .TRUE.
         show_lam = .TRUE.
      case('help')
         call print_summary()
      case default
         @:ABORT('invalid option name')
      end select

      if (stat /= STAT_OK) then
         @:STOP('invalid --'//name)
      end if

   end subroutine opt_proc

   subroutine print_summary()

      call arg_parser%print_summary()
      @:STOP()

   end subroutine print_summary

   !****

   #:for name, type in (('specgrid', 'specgrid_t'),  &
                        ('photgrid', 'photgrid_t'))

      subroutine inspect_${name}$(grid, grid_label)

         type(${type}$), intent(in) :: grid
         character(*), intent(in)   :: grid_label

         integer              :: rank
         integer              :: r
         type(axis_t)         :: axis
         integer              :: n
         real(RD)             :: x_min
         real(RD)             :: x_max
         character(LABEL_LEN) :: label
         #:if type == 'specgrid_t'
            real(RD)          :: lam_min
            real(RD)          :: lam_max
         #:endif

         ! Inspect the grid

         ! Type

         if (show_type) then

            write(OUTPUT_UNIT, 100) '${name}$'
100         format('Type: ',A)

         end if

         ! Label

         if (show_label) then

            write(OUTPUT_UNIT, 110) TRIM(grid_label)
110         format('Label: ',A)
         end if

         ! Axes

         if (show_axes) then

            call grid%get_rank(rank)

            write(OUTPUT_UNIT, 120) rank
120         format('Axes [',I0,'] :')

            do r = 1, rank

               call grid%get_axis(r, axis)

               call axis%get_n(n)

               call axis%get_x_min(x_min)
               call axis%get_x_max(x_max)

               call axis%get_label(label)

               write(OUTPUT_UNIT, 130) TRIM(label), n, x_min, x_max
130            format(2X,A,' [',I0,']: ',T20,'(',G0,' -> ',G0,')')

            end do

         end if

         #:if type == 'specgrid_t'

            if(show_lam) then

               call grid%get_lam_min(lam_min)
               call grid%get_lam_max(lam_max)

               write(OUTPUT_UNIT, 140) lam_min, lam_max
140            format('Wavelength: ',T20,'(',G0,' -> ',G0,')')

            end if

         #:endif

         ! Finish

         return

      end subroutine inspect_${name}$

   #:endfor

end program inspect_grid
