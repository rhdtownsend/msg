! Module   : specgrid_to_photgrid
! Purpose  : create photgrid files from specgrid files
!
! Copyright 2021-2022 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

program specgrid_to_photgrid

   ! Uses

   use forum_m
   use msg_m

   use tools_utils_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none (type, external)

   ! Variables

   character(:), allocatable :: input_file_name
   character(:), allocatable :: passband_file_name
   character(:), allocatable :: output_file_name

   type(arg_parser_t) :: arg_parser
   type(hdf5io_t)     :: hdf5io
   type(passband_t)   :: passband
   type(specgrid_t)   :: specgrid
   type(photgrid_t)   :: photgrid

   ! Parse command-line arguments

   arg_parser = arg_parser_t()

   call arg_parser%parse(arg_proc, opt_proc)

   if (.NOT. allocated(input_file_name)) call synopsis()
   if (.NOT. allocated(passband_file_name)) call synopsis()
   if (.NOT. allocated(output_file_name)) call synopsis()

   ! Read the passband

   hdf5io = hdf5io_t(passband_file_name, OPEN_FILE_RO)
   call passband%read(hdf5io)
   call hdf5io%final()

   ! Read the specgrid

   hdf5io = hdf5io_t(input_file_name, OPEN_FILE_RO)
   call specgrid%read(hdf5io)
   call hdf5io%final()

   ! Create the photgrid

   call specgrid%filter(passband, photgrid)

   ! Write the photgrid

   hdf5io = hdf5io_t(output_file_name, CREATE_FILE)
   call photgrid%write(hdf5io)
   call hdf5io%final()

   ! Finish

contains

   subroutine arg_proc(a, value)

      integer, intent(in)      :: a
      character(*), intent(in) :: value

      select case(a)
      case(1)
         input_file_name = value
      case(2)
         passband_file_name = value
      case(3)
         output_file_name = value
      case default
         call synopsis()
      end select

   end subroutine arg_proc

   !****

   subroutine opt_proc(name, value)

      character(*), intent(in) :: name
      character(*), intent(in) :: value

      select case(name)
      case default
         @:ABORT('invalid option name')
      end select

   end subroutine opt_proc

   !****

   subroutine synopsis()

      write(OUTPUT_UNIT, *) 'Synopsis: specgrid_to_photgrid <input_file_name> <passband_file_name> <output_file_name>'
      stop

   end subroutine synopsis

end program specgrid_to_photgrid
