! Module   : specgrid_to_photgrid
! Purpose  : create photgrid files from specgrid files
!
! Copyright 2021-2022 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

program specgrid_to_photgrid

   ! Uses

   use forum_m
   use msg_m

   use tools_utils_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none (type, external)

   ! Variables

   character(:), allocatable :: specgrid_file_name
   character(:), allocatable :: passband_file_name
   character(:), allocatable :: photgrid_file_name
   logical, allocatable      :: remove_orphans
   character(:), allocatable :: grid_label

   type(arg_parser_t) :: arg_parser
   type(hdf5io_t)     :: hdf5io
   type(passband_t)   :: passband
   type(specgrid_t)   :: specgrid
   type(photgrid_t)   :: photgrid

   ! Parse command-line arguments

   remove_orphans = .FALSE.

   arg_parser = arg_parser_t('specgrid_to_photgrid SPECGRID_FILE PASSBAND_FILE PHOTGRID_FILE', auto_help=.TRUE.)

   call arg_parser%define_option('remove-orphans', OPT_NO_ARG, 'r', &
      description='remove orphaned vertices')
   call arg_parser%define_option('grid-label', OPT_REQUIRED_ARG, short_name='l', &
      usage='--grid-label=NAME', description='grid label')

   call arg_parser%parse(arg_proc, opt_proc)

   if (.NOT. ALLOCATED(specgrid_file_name)) call print_summary()
   if (.NOT. ALLOCATED(passband_file_name)) call print_summary()
   if (.NOT. ALLOCATED(photgrid_file_name)) call print_summary()

   ! Read the passband

   hdf5io = hdf5io_t(passband_file_name, OPEN_FILE_RO)
   call passband%read(hdf5io)
   call hdf5io%final()

   ! Read the specgrid

   hdf5io = hdf5io_t(specgrid_file_name, OPEN_FILE_RO)

   call specgrid%read(hdf5io)

   if (hdf5io%attr_exists('label') .AND. .NOT. ALLOCATED(grid_label)) then
      allocate(character(1024)::grid_label)
      call hdf5io%read_attr('label', grid_label)
   end if

   call hdf5io%final()

   ! Create the photgrid

   call specgrid%filter(passband, photgrid)

   ! If necessary, remove orphans

   if (remove_orphans) call specgrid%remove_orphans()

   ! Write the output photgrid

   hdf5io = hdf5io_t(photgrid_file_name, CREATE_FILE)

   call photgrid%write(hdf5io)

   if (ALLOCATED(grid_label)) then
      call hdf5io%write_attr('label', grid_label)
   end if

   call hdf5io%final()

   ! Finish

contains

   subroutine arg_proc(a, value)

      integer, intent(in)      :: a
      character(*), intent(in) :: value

      select case(a)
      case(1)
         specgrid_file_name = value
      case(2)
         passband_file_name = value
      case(3)
         photgrid_file_name = value
      case default
         call print_summary()
      end select

   end subroutine arg_proc

   !****

   subroutine opt_proc(name, value)

      character(*), intent(in) :: name
      character(*), intent(in) :: value

      select case(name)
      case('remove-orphans')
         remove_orphans = .TRUE.
      case('grid-label')
         grid_label = value
      case('help')
         call print_summary()
      case default
         @:ABORT('invalid option name')
      end select

   end subroutine opt_proc

   !****

   subroutine print_summary()

      call arg_parser%print_summary()
      @:STOP()

   end subroutine print_summary

end program specgrid_to_photgrid
