! Module   : rebin_specint
! Purpose  : Rebin a specint file
!
! Copyright 2021-2022 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

program rebin_specint

   ! Uses

   use forum_m, PI_ => PI
   use msg_m

   use tools_utils_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none (type, external)

   ! Variables

   character(:), allocatable :: input_file_name
   character(:), allocatable :: output_file_name
   real(RD), allocatable     :: lam_min
   real(RD), allocatable     :: lam_max
   character(:), allocatable :: samp_type
   real(RD), allocatable     :: samp_value
   character(:), allocatable :: samp_align

   type(arg_parser_t)                :: arg_parser
   type(hdf5io_t)                    :: hdf5io
   class(specint_t), allocatable     :: specint
   character(TYPE_LEN)               :: type
   type(hdf5io_t)                    :: hdf5io_labels
   character(LABEL_LEN), allocatable :: labels(:)
   integer                           :: n_labels
   real(RD), allocatable             :: values(:)
   integer                           :: j
   real(RD)                          :: spec_lam_min
   real(RD)                          :: spec_lam_max

   ! Parse command-line arguments

   samp_align = 'center'

   arg_parser = arg_parser_t('rebin_specint INPUT_FILE OUTPUT_FILE', auto_help=.TRUE.)

   call arg_parser%define_option('lambda-min', OPT_REQUIRED_ARG, &
      usage='--lamda-min=MIN', description='minimum wavelength')
   call arg_parser%define_option('lambda-max', OPT_REQUIRED_ARG, &
      usage='--lamda-max=MAX', description='maximum wavelength')
   call arg_parser%define_option('sampling-type', OPT_REQUIRED_ARG, short_name='t', &
      usage='--sampling-type=TYPE', description='sampling type ( R | delta_lam )')
   call arg_parser%define_option('sampling-value', OPT_REQUIRED_ARG, short_name='v', &
      usage='--sampling-value=VALUE', description='sampling value')
   call arg_parser%define_option('sampling-align', OPT_REQUIRED_ARG, short_name='a', &
      usage='--sampling-align=ALIGN', description='sampling alingment ( center | left | right )')

   call arg_parser%parse(arg_proc, opt_proc)

   if (.NOT. ALLOCATED(input_file_name)) call print_summary()
   if (.NOT. ALLOCATED(output_file_name)) call print_summary()

   ! Read the input specint

   hdf5io = hdf5io_t(input_file_name, OPEN_FILE_RO)

   call hdf5io%read_attr('TYPE', type)
   allocate(specint, MOLD=specint_t(type))

   call specint%read(hdf5io)

   hdf5io_labels = hdf5io_t(hdf5io, 'labels')

   labels = hdf5io_labels%dset_names()
   n_labels = SIZE(labels)

   allocate(values(n_labels))

   do j = 1, n_labels
      call hdf5io_labels%read_dset(labels(j), values(j))
   end do

   call hdf5io_labels%final()
   call hdf5io%final()

   ! Determine the wavelength range

   call specint%get_lam_min(spec_lam_min)
   call specint%get_lam_max(spec_lam_max)

   if (ALLOCATED(lam_min)) then
      lam_min = MAX(lam_min, spec_lam_min)
   else
      lam_min = spec_lam_min
   end if

   if (ALLOCATED(lam_max)) then
      lam_max = MIN(lam_max, spec_lam_max)
   else
      lam_max = spec_lam_max
   end if

   ! Rebin the specint

   if (ALLOCATED(samp_type)) then

      if (.NOT. ALLOCATED(samp_value)) then
         @:STOP('--sampling-type requires --sampling-value')
      end if

      select case(samp_type)
      case('delta_lam')
         call rebin_spacing(specint, lam_min, lam_max, samp_value, samp_align)
      case('R')
         call rebin_resolution(specint, lam_min, lam_max, samp_value, samp_align)
      case default
         @:STOP('invalid --sampling-type')
      end select

   else

      ! No rebinning necessary, just subset

      call specint%subset(lam_min, lam_max)

   end if

   ! Write the output specint

   hdf5io = hdf5io_t(output_file_name, CREATE_FILE)

   call specint%write(hdf5io)

   hdf5io_labels = hdf5io_t(hdf5io, 'labels')

   do j = 1, n_labels
      call hdf5io_labels%write_dset(labels(j), values(j))
   end do

   call hdf5io%final()

   ! Finish

contains

   subroutine arg_proc(a, value)

      integer, intent(in)      :: a
      character(*), intent(in) :: value

      select case(a)
      case(1)
         input_file_name = value
      case(2)
         output_file_name = value
      case default
         call print_summary()
      end select

   end subroutine arg_proc

   !****

   subroutine opt_proc(name, value)

      character(*), intent(in) :: name
      character(*), intent(in) :: value

      integer :: stat

      stat = STAT_OK

      select case(name)
      case('lambda-min')
         call parse_value(value, lam_min)
      case('lambda-max')
         call parse_value(value, lam_max)
      case('sampling-type')
         samp_type = value
      case('sampling-value')
         call parse_value(value, samp_value)
      case('sampling-align')
         samp_align = value
      case('help')
         call print_summary()
      case default
         @:ABORT('invalid option name')
      end select

      if (stat /= STAT_OK) then
         @:STOP('invalid --'//name)
      end if

   end subroutine opt_proc

   !****

   subroutine print_summary()

      call arg_parser%print_summary()
      @:STOP()

   end subroutine print_summary

   !****

   subroutine rebin_spacing(specint, lam_min, lam_max, delta_lam, samp_align)

      class(specint_t), intent(inout) :: specint
      real(RD), intent(in)            :: lam_min
      real(RD), intent(in)            :: lam_max
      real(RD), intent(in)            :: delta_lam
      character(*), intent(in)        :: samp_align

      real(RD) :: dx
      integer  :: n
      real(RD) :: x_0

      ! Determine wavelength axis parameters

      dx = delta_lam

      n = FLOOR((lam_max - lam_min)/dx) + 1

      select case (samp_align)
      case ('left')
         x_0 = lam_min
      case ('right')
         x_0 = lam_max - dx*(n-1)
      case ('center')
         x_0 = 0.5_RD*(lam_min + lam_max - dx*(n-1))
      case default
         @:STOP('invalid --sampling-align')
      end select

      x_0 = MAX(x_0, lam_min)

      ! Do the rebinning

      call specint%rebin(lin_range_t(x_0, dx, n))

      ! Finish

      return

   end subroutine rebin_spacing

   !****

   subroutine rebin_resolution(specint, lam_min, lam_max, R, samp_align)

      class(specint_t), intent(inout) :: specint
      real(RD), intent(in)            :: lam_min
      real(RD), intent(in)            :: lam_max
      real(RD), intent(in)            :: R
      character(*), intent(in)        :: samp_align

      real(RD) :: dx
      integer  :: n
      real(RD) :: x_0

      ! Determine wavelength axis parameters

      dx = 1._RD/R

      n = FLOOR((LOG(lam_max) - LOG(lam_min))/dx) + 1

      select case (samp_align)
      case ('left')
         x_0 = LOG(lam_min)
      case ('right')
         x_0 = LOG(lam_max) - dx*(n-1)
      case ('center')
         x_0 = 0.5_RD*(LOG(lam_min) + LOG(lam_max) - dx*(n-1))
      case default
         @:STOP('invalid --sampling-align')
      end select

      x_0 = MAX(x_0, LOG(lam_min))

      ! Do the rebinning

      call specint%rebin(log_range_t(x_0, dx, n))

      ! Finish

      return

   end subroutine rebin_resolution

end program rebin_specint
