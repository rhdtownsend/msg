! Module   : rebin_specint
! Purpose  : Rebin a specint file
!
! Copyright 2021-2022 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

program rebin_specint

   ! Uses

   use forum_m, PI_ => PI
   use msg_m

   use arg_parser_m
   use tools_utils_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none (type, external)

   ! Variables

   character(:), allocatable :: input_file_name
   character(:), allocatable :: output_file_name
   character(:), allocatable :: lam_range
   character(:), allocatable :: sampling
   character(:), allocatable :: alignment

   type(arg_parser_t)                :: arg_parser
   type(hdf5io_t)                    :: hdf5io
   class(specint_t), allocatable     :: specint
   character(TYPE_LEN)               :: type
   type(hdf5io_t)                    :: hdf5io_labels
   character(LABEL_LEN), allocatable :: labels(:)
   integer                           :: n_labels
   real(RD), allocatable             :: values(:)
   integer                           :: j
   real(RD)                          :: lam_min
   real(RD)                          :: lam_max
   real(RD)                          :: range_min
   real(RD)                          :: range_max
   character(:), allocatable         :: sampling_type
   real(RD)                          :: sampling_value

   ! Parse command-line arguments

   alignment = 'C'

   arg_parser = arg_parser_t()

   call arg_parser%define_option('lam_range', OPT_REQUIRED_ARG)
   call arg_parser%define_option('sampling', OPT_REQUIRED_ARG)
   call arg_parser%define_option('alignment', OPT_REQUIRED_ARG)

   call arg_parser%parse(arg_proc, opt_proc)

   if (.NOT. allocated(input_file_name)) call synopsis()
   if (.NOT. allocated(output_file_name)) call synopsis()

   ! Read the input specint

   hdf5io = hdf5io_t(input_file_name, OPEN_FILE_RO)

   call hdf5io%read_attr('TYPE', type)
   allocate(specint, MOLD=specint_t(type))

   call specint%read(hdf5io)

   hdf5io_labels = hdf5io_t(hdf5io, 'labels')

   labels = hdf5io_labels%dset_names()
   n_labels = SIZE(labels)

   allocate(values(n_labels))

   do j = 1, n_labels
      call hdf5io_labels%read_dset(labels(j), values(j))
   end do

   call hdf5io_labels%final()
   call hdf5io%final()

   ! Determine the wavelength range

   call specint%get_lam_min(lam_min)
   call specint%get_lam_max(lam_max)

   if (ALLOCATED(lam_range)) then

      call parse_values(lam_range, range_min, range_max)
      lam_min = MAX(lam_min, range_min)
      lam_max = MIN(lam_max, range_max)

   end if

   ! Rebin the specint

   if (ALLOCATED(sampling)) then

      call parse_name_value(sampling, sampling_type, sampling_value)

      select case(sampling_type)
      case('delta_lam')
         call rebin_spacing(specint, lam_min, lam_max, sampling_value, alignment)
      case('R')
         call rebin_resolution(specint, lam_min, lam_max, sampling_value, alignment)
      case default
         @:ABORT('invalid sampling type')
      end select

   else

      ! No rebinning necessary, just subset

      call specint%subset(lam_min, lam_max)

   end if

   ! Write the output specint

   hdf5io = hdf5io_t(output_file_name, CREATE_FILE)

   call specint%write(hdf5io)

   hdf5io_labels = hdf5io_t(hdf5io, 'labels')

   do j = 1, n_labels
      call hdf5io_labels%write_dset(labels(j), values(j))
   end do

   call hdf5io%final()

   ! Finish

contains

   subroutine arg_proc(a, value)

      integer, intent(in)      :: a
      character(*), intent(in) :: value

      select case(a)
      case(1)
         input_file_name = value
      case(2)
         output_file_name = value
      case default
         call synopsis()
      end select

   end subroutine arg_proc

   !****

   subroutine opt_proc(name, value)

      character(*), intent(in) :: name
      character(*), intent(in) :: value

      select case(name)
      case('range')
         lam_range = value
      case('sampling')
         sampling = value
      case('alignment')
         alignment = value
      case default
         @:ABORT('invalid option name')
      end select

   end subroutine opt_proc

   !****

   subroutine synopsis()

      write(OUTPUT_UNIT, *) 'Synopsis: rebin_specint <input_file_name> <output_file_name> [options]'
      stop

   end subroutine synopsis

   !****

   subroutine rebin_spacing(specint, lam_min, lam_max, delta_lam, alignment)

      class(specint_t), intent(inout) :: specint
      real(RD), intent(in)            :: lam_min
      real(RD), intent(in)            :: lam_max
      real(RD), intent(in)            :: delta_lam
      character(*), intent(in)        :: alignment

      real(RD) :: dx
      integer  :: n
      real(RD) :: x_0

      ! Determine wavelength axis parameters

      dx = delta_lam

      n = FLOOR((lam_max - lam_min)/dx) + 1

      select case (alignment)
      case ('L')
         x_0 = lam_min
      case ('R')
         x_0 = lam_max - dx*(n-1)
      case ('C')
         x_0 = 0.5_RD*(lam_min + lam_max - dx*(n-1))
      case default
         @:ABORT('invalid alignment')
      end select

      x_0 = MAX(x_0, lam_min)

      ! Do the rebinning

      call specint%rebin(lin_range_t(x_0, dx, n))

      ! Finish

      return

   end subroutine rebin_spacing

   !****

   subroutine rebin_resolution(specint, lam_min, lam_max, R, alignment)

      class(specint_t), intent(inout) :: specint
      real(RD), intent(in)            :: lam_min
      real(RD), intent(in)            :: lam_max
      real(RD), intent(in)            :: R
      character(*), intent(in)        :: alignment
      type(log_range_t)               :: range

      real(RD) :: dx
      integer  :: n
      real(RD) :: x_0

      ! Determine wavelength axis parameters

      dx = 1._RD/R

      n = FLOOR((LOG(lam_max) - LOG(lam_min))/dx) + 1

      select case (alignment)
      case ('L')
         x_0 = LOG(lam_min)
      case ('R')
         x_0 = LOG(lam_max) - dx*(n-1)
      case ('C')
         x_0 = 0.5_RD*(LOG(lam_min) + LOG(lam_max) - dx*(n-1))
      case default
         @:ABORT('invalid alignment')
      end select

      x_0 = MAX(x_0, LOG(lam_min))

      ! Do the rebinning

      call specint%rebin(log_range_t(x_0, dx, n))

      ! Finish

      return

   end subroutine rebin_resolution

end program rebin_specint
