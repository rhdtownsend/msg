! Submodule : photgrid_operate_sm
! Purpose   : Operation routines for photgrid_t
!
! Copyright 2021-2022 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

submodule (photgrid_m) photgrid_operate_sm

   ! No implicit typing

   implicit none (type, external)

   ! Procedures

contains

   module procedure subset

      integer              :: n
      logical, allocatable :: vert_mask(:)

      ! Subset the photgrid by retaining only those vertices with
      ! coordinates in the range defined by x_min and x_max (i.e.,
      ! x_min <= x_vec <= x_max along each dimension). This
      ! potentially changes the rank, by removing degenerate
      ! dimensions

      call self%photsource%get_n(n)

      allocate(vert_mask(n))

      call self%vgrid%subset(x_min, x_max, vert_mask=vert_mask)

      call self%photsource%subset(vert_mask)

      call self%flush_cache()

      ! Finish

      return

   end procedure subset

   !****

   module procedure remove_orphans

      integer              :: n_vert_seq
      logical, allocatable :: orphan_mask(:)
      integer              :: n

      ! Remove orphaned vertices from the photgrid

      call self%vgrid%get_n_vert_seq(n_vert_seq)

      allocate(orphan_mask(n_vert_seq))

      call self%vgrid%find_orphans(orphan_mask)
      call self%vgrid%remove_verts(orphan_mask)

      call self%photsource%subset(.NOT. orphan_mask)

      call self%flush_cache()

      ! Check for consistency

      call self%vgrid%get_n_vert_seq(n_vert_seq)
      call self%photsource%get_n(n)

      @:CHECK_BOUNDS(n, n_vert_seq)

      ! Finish

      return

   end procedure remove_orphans
end submodule photgrid_operate_sm
