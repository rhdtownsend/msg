! Submodule : photgrid_interp_sm
! Purpose   : Interpolation routines for photgrid_t
!
! Copyright 2021-2025 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

submodule (photgrid_m) photgrid_interp_sm

   ! Uses

   use photint_m
   use stat_m

   ! No implicit typing

   implicit none (type, external)

   ! Procedures

contains

   #:for name, arg_var, arg_type, res_var in (('intensity', 'mu', 'real(RD)', 'I'), &
                                              ('E_moment', 'k', 'integer', 'E'), &
                                              ('P_moment', 'l', 'integer', 'P'))

      module procedure interp_${name}$

         ! Interpolate ${name}$

         call self%vgrid%interp(data_proc_, x_vec, ${res_var}$, stat, deriv_vec, order)

         ! Finish

         return

      contains

         subroutine data_proc_(v_seq, f, stat)

            integer, intent(in)            :: v_seq
            real(RD), intent(out)          :: f
            integer, intent(out), optional :: stat

            class(photint_t), pointer :: photint

            call self%photcache%fetch(v_seq, fetch_proc_, photint, stat)
            if (PRESENT(stat)) then
               if (stat /= STAT_OK) return
            end if

            call photint%interp_${name}$(${arg_var}$, f, stat)
            if (PRESENT(stat)) then
               if (stat /= STAT_OK) return
            end if

            call self%photcache%release(v_seq, stat)

            return

         end subroutine data_proc_

         subroutine fetch_proc_(i, photint, stat)

            integer, intent(in)                        :: i
            class(photint_t), allocatable, intent(out) :: photint
            integer, intent(out), optional             :: stat

            call self%photsource%fetch(i, photint, stat)

            return

         end subroutine fetch_proc_

      end procedure interp_${name}$

   #:endfor

   !****

   module procedure interp_irradiance

      ! Check dimensions

      if ( &
         SIZE(mu) /= SIZE(x_vec, 2) .OR. &
         SIZE(dOmega) /= SIZE(x_vec, 2)) then
         if (PRESENT(stat)) then
            stat = STAT_INVALID_DIMENSION
            return
         else
            @:ABORT('invalid dimension')
         end if
      end if

      ! Interpolate the irradiance

      call self%vgrid%interp_sum(data_proc_, x_vec, F, stat, deriv_vec, order)

      ! Finish

      return

   contains

      subroutine data_proc_(j, v_seq, f, stat)

         integer, intent(in)            :: j
         integer, intent(in)            :: v_seq
         real(RD), intent(out)          :: f
         integer, intent(out), optional :: stat

         class(photint_t), pointer :: photint

         call self%photcache%fetch(v_seq, fetch_proc_, photint, stat)
         if (PRESENT(stat)) then
            if (stat /= STAT_OK) return
         end if

         if (mu(j) >= 0._RD) then

            call photint%interp_intensity(mu(j), f, stat)
            if (PRESENT(stat)) then
               if (stat /= STAT_OK) return
            end if

            f = f*dOmega(j)

            call self%photcache%release(v_seq, stat)

         else

            f = 0._RD

         end if

         return

      end subroutine data_proc_

      subroutine fetch_proc_(i, photint, stat)

         integer, intent(in)                        :: i
         class(photint_t), allocatable, intent(out) :: photint
         integer, intent(out), optional             :: stat

         call self%photsource%fetch(i, photint, stat)

         return

      end subroutine fetch_proc_

   end procedure interp_irradiance

   !****

   module procedure interp_flux

      ! Interpolate the flux

      call self%vgrid%interp(data_proc_, x_vec, F, stat, deriv_vec, order)

      ! Finish

   contains

      subroutine data_proc_(v_seq, f, stat)

         integer, intent(in)            :: v_seq
         real(RD), intent(out)          :: f
         integer, intent(out), optional :: stat

         class(photint_t), pointer :: photint

         call self%photcache%fetch(v_seq, fetch_proc_, photint, stat)
         if (PRESENT(stat)) then
            if (stat /= STAT_OK) return
         end if

         call photint%interp_flux(f, stat)
         if (PRESENT(stat)) then
            if (stat /= STAT_OK) return
         end if

         call self%photcache%release(v_seq, stat)

         return

      end subroutine data_proc_

      subroutine fetch_proc_(i, photint, stat)

         integer, intent(in)                         :: i
         class(photint_t), allocatable, intent(out)  :: photint
         integer, intent(out), optional              :: stat

         call self%photsource%fetch(i, photint, stat)

         return

      end subroutine fetch_proc_

   end procedure interp_flux

   !****

   module procedure adjust_x_vec

      ! Adjust x_vec in the direction dx_vec, until it falls within a
      ! valid cell

      call self%vgrid%adjust_x_vec(x_vec, dx_vec, x_adj, stat)

      ! Finish

      return

   end procedure adjust_x_vec

end submodule photgrid_interp_sm
