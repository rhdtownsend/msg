! Module  : utest_vgrid_m
! Purpose : Test implementations for utest_vgrid
!
! Copyright 2021-2025 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

module utest_vgrid_m

  ! Uses

  use forum_m

  use stat_m
  use vgrid_m

  use ISO_FORTRAN_ENV

  ! No implicit typing

  implicit none (type, external)

  ! Access specifiers

  private

  public :: test

contains

   subroutine test()

      call test_stat_()
      call test_attr_()
      call test_construct_()
      call test_subset_()
      call test_interp_()
      call test_adjust_()

   end subroutine test

   !****

   subroutine test_stat_()

      integer, parameter :: N = 6

      type(vgrid_t) :: vg
      integer       :: stat(N)
      integer       :: stat_sum(N)
      integer       :: stat_chk(N)
      character(32) :: stat_str(N)
      real(RD)      :: x_vec(2,N)
      integer       :: n_x_vec(N)
      integer       :: order(N)

      print *, '  exceptions'

      call build_vgrid_(vg)

      call stat_arrange_()
      call stat_act_()
      call stat_assert_()

      ! Finish

      return

   contains

      subroutine stat_arrange_()

         ! Set up default (good) params

         x_vec(1,:) = 1.5_RD
         x_vec(2,:) = 0.5_RD
         n_x_vec = 2
         order = 3

         ! Now modify to create exceptional cases

         !

         stat_chk(1) = STAT_OK
         stat_str(1) = 'STAT_OK'

         !

         x_vec(1,2) = -0.5_RD
         stat_chk(2) = STAT_OUT_OF_BOUNDS_AXIS_LO
         stat_str(2) = 'STAT_OUT_OF_BOUNDS_AXIS_LO'

         !

         x_vec(2,3) = 2.5_RD
         stat_chk(3) = STAT_OUT_OF_BOUNDS_AXIS_HI
         stat_str(3) = 'STAT_OUT_OF_BOUNDS_AXIS_HI'

         !

         x_vec(2,4) = 1.5_RD
         stat_chk(4) = STAT_UNAVAILABLE_DATA
         stat_str(4) = 'STAT_UNAVAILABLE_DATA'

         !

         order(5) = 2
         stat_chk(5) = STAT_INVALID_ARGUMENT
         stat_str(5) = 'STAT_INVALID_ARGUMENT'

         !

         n_x_vec(6) = 1
         stat_chk(6) = STAT_INVALID_DIMENSION
         stat_str(6) = 'STAT_INVALID_DIMENSION'

         ! Finish

      end subroutine stat_arrange_

      !****

      subroutine stat_act_()

         integer  :: j
         real(RD) :: f
         real(RD) :: f_sum

         do j = 1, N

            call vg%interp(data_proc_, x_vec(:n_x_vec(j),j), f, stat(j), order=order(j))
            call vg%interp_sum(data_proc_sum_, x_vec(:n_x_vec(j),j:j), f_sum, stat_sum(j), order=order(j))

         end do

         ! Finish

         return

      end subroutine stat_act_

      !****

      subroutine data_proc_(v_seq, data, stat)

         integer, intent(in)            :: v_seq
         real(RD), intent(out)          :: data
         integer, intent(out), optional :: stat

         data = 0._RD

         if (PRESENT(stat)) stat = STAT_OK

         ! Finish

         return

      end subroutine data_proc_

      !****

      subroutine data_proc_sum_(j, v_seq, data, stat)

         integer, intent(in)            :: j
         integer, intent(in)            :: v_seq
         real(RD), intent(out)          :: data
         integer, intent(out), optional :: stat

         data = 0._RD

         if (PRESENT(stat)) stat = STAT_OK

         ! Finish

         return

      end subroutine data_proc_sum_

      !****

      subroutine stat_assert_()

         integer :: j

         do j = 1, N
            if (stat(j) /= stat_chk(j)) then
               print *,'    FAIL interp ', TRIM(stat_str(j)), ' ', stat(j), '/=', stat_chk(j)
            else
               print *,'    PASS interp ', TRIM(stat_str(j))
            end if
         end do

         do j = 1, N
            if (stat_sum(j) /= stat_chk(j)) then
               print *,'    FAIL interp_sum ', TRIM(stat_str(j)), ' ', stat_sum(j), '/=', stat_chk(j)
            else
               print *,'    PASS interp_sum ', TRIM(stat_str(j))
            end if
         end do

         ! Finish

         return

      end subroutine stat_assert_

   end subroutine test_stat_

   !****

   subroutine test_attr_()

      type(vgrid_t) :: vg
      integer       :: rank
      integer       :: rank_chk
      integer       :: shape(2)
      integer       :: shape_chk(2)
      integer       :: n_vert_seq
      integer       :: n_vert_seq_chk

      print *, '  attributes'

      call build_vgrid_(vg)

      call attr_arrange_()
      call attr_act_()
      call attr_assert_()

      ! Finish

      return

   contains

      subroutine attr_arrange_()

         rank_chk = 2
         shape_chk = [3,3]
         n_vert_seq_chk = 8

         ! Finish

         return

      end subroutine attr_arrange_

      !****

      subroutine attr_act_()

         call vg%get_rank(rank)
         call vg%get_shape(shape)
         call vg%get_n_vert_seq(n_vert_seq)

         ! Finish

         return

      end subroutine attr_act_

      !****

      subroutine attr_assert_()

         if (rank == rank_chk) then
            print *,'    PASS rank'
         else
            print *,'    FAIL rank:', rank, '/=', rank_chk
         end if

         if (ALL(shape == shape_chk)) then
            print *,'    PASS shape'
         else
            print *,'    FAIL shape:', shape, '/=', shape_chk
         end if

         if (n_vert_seq == n_vert_seq_chk) then
            print *,'    PASS n_vert_seq'
         else
            print *,'    FAIL n_vert_seq:', n_vert_seq, '/=', n_vert_seq_chk
         end if

         ! Finish

         return

      end subroutine attr_assert_

   end subroutine test_attr_

   !****

   subroutine test_construct_()

      use axis_m

      type(vgrid_t) :: vg
      real(RD)      :: x_vec(2)
      real(RD)      :: f_seq(4)
      real(RD)      :: f
      real(RD)      :: f_chk

      print *, '  constructors'

      call construct_arrange_()
      call construct_act_()
      call construct_assert_()

      ! Finish

      return

   contains

      subroutine construct_arrange_()

         type(axis_t) :: axes(2)
         integer      :: v_lin_seq(4)

         axes(1) = axis_t([1._RD, 2._RD, 3._RD, 4._RD], 'x')
         axes(2) = axis_t([1._RD, 2._RD, 3._RD, 4._RD], 'y')

         v_lin_seq = [11, 7, 10, 6]
         f_seq = [6._RD, 5._RD, 5._RD, 4._RD]

         vg = vgrid_t(axes, v_lin_seq)

         x_vec = [2.5_RD, 2.5_RD]

         f_chk = 5._RD

         ! Finish

         return

      end subroutine construct_arrange_

      !****

      subroutine construct_act_()

         call vg%interp(data_proc_, x_vec, f)

         ! Finish

         return

      end subroutine construct_act_

      !****

      subroutine construct_assert_()

         real(RD), parameter :: tol = 1E-14_RD

         real(RD) :: f_err

         f_err = (f - f_chk)/f_chk

         if (ABS(f_err) < tol) then
            print *,'    PASS vgrid_t_map_'
         else
            print *,'    FAIL vgrid_t_map:', f_err, '>', tol
         end if

         ! Finish

         return

      end subroutine construct_assert_

      !****

      subroutine data_proc_(v_seq, data, stat)

         integer, intent(in)            :: v_seq
         real(RD), intent(out)          :: data
         integer, intent(out), optional :: stat

         data = f_seq(v_seq)

         if (PRESENT(stat)) stat = STAT_OK

         ! Finish

         return

      end subroutine data_proc_

   end subroutine test_construct_

   !****

   subroutine test_subset_()

      use axis_m

      type(vgrid_t) :: vg
      integer       :: rank
      integer       :: rank_chk
      integer       :: shape(1)
      integer       :: shape_chk(1)
      logical       :: vert_mask(8)
      logical       :: vert_mask_chk(8)
      logical       :: dim_mask(2)
      logical       :: dim_mask_chk(2)

      print *, '  subset'

      call build_vgrid_(vg)

      call subset_arrange_()
      call subset_act_()
      call subset_assert_()

      ! Finish

      return

   contains

      subroutine subset_arrange_()

         rank_chk = 1
         shape_chk = [2]

         vert_mask_chk = [.FALSE., .FALSE., .FALSE., .TRUE., .FALSE., .FALSE., .TRUE., .FALSE.]
         dim_mask_chk = [.FALSE., .TRUE.]

         ! Finish

         return

      end subroutine subset_arrange_

      !****

      subroutine subset_act_()

         call vg%subset([0._RD, 0.5_RD], [0.5_RD, 2._RD], vert_mask=vert_mask, dim_mask=dim_mask)

         call vg%get_rank(rank)
         call vg%get_shape(shape)

         ! Finish

         return

      end subroutine subset_act_

      !****

      subroutine subset_assert_()

         if (rank == rank_chk) then
            print *,'    PASS rank'
         else
            print *,'    FAIL rank:', rank, '/=', rank_chk
         end if

         if (ALL(shape == shape_chk)) then
            print *,'    PASS shape'
         else
            print *,'    FAIL shape:', shape, '/=', shape_chk
         end if

         if (ALL(vert_mask .EQV. vert_mask_chk)) then
            print *,'    PASS vert_mask'
         else
            print *,'    FAIL vert_mask:', vert_mask, '/=', vert_mask_chk
         end if

         if (ALL(dim_mask .EQV. dim_mask_chk)) then
            print *,'    PASS dim_mask'
         else
            print *,'    FAIL dim_mask:', dim_mask, '/=', dim_mask_chk
         end if

         ! Finish

         return

      end subroutine subset_assert_

   end subroutine test_subset_

   !****

   subroutine test_interp_()

      type(vgrid_t) :: vg
      real(RD)      :: f(8)
      real(RD)      :: x_vec(2,2)
      real(RD)      :: f_lin(2)
      real(RD)      :: f_cub(2)
      real(RD)      :: f_sum
      real(RD)      :: f_chk(2)
      real(RD)      :: f_sum_chk

      print *, '  interp'

      call build_vgrid_(vg)

      call interp_arrange_()
      call interp_act_()
      call interp_assert_()

      ! Finish

      return

   contains

      subroutine interp_arrange_()

         ! Set vertex values (f = 1+x+2*y)

         f(1) = 1._RD
         f(2) = 2._RD
         f(3) = 3._RD

         f(4) = 3._RD
         f(5) = 4._RD
         f(6) = 5._RD

         f(7) = 5._RD
         f(8) = 6._RD

         x_vec(:,1) = [1.0_RD, 1.0_RD]
         x_vec(:,2) = [0.5_RD, 1.5_RD]

         f_chk = 1._RD + x_vec(1,:) + 2._RD*x_vec(2,:)

         f_sum_chk = SUM(f_chk)

         ! Finish

         return

      end subroutine interp_arrange_

      !****

      subroutine interp_act_()

         call vg%interp(data_proc_, x_vec(:,1), f_lin(1), order=1)
         call vg%interp(data_proc_, x_vec(:,2), f_lin(2), order=1)

         call vg%interp(data_proc_, x_vec(:,1), f_cub(1), order=3)
         call vg%interp(data_proc_, x_vec(:,2), f_cub(2), order=3)

         call vg%interp_sum(data_proc_sum_, x_vec, f_sum, order=3)

         ! Finish

         return

      end subroutine interp_act_

      !****

      subroutine data_proc_(v_seq, data, stat)

         integer, intent(in)            :: v_seq
         real(RD), intent(out)          :: data
         integer, intent(out), optional :: stat

         data = f(v_seq)

         if (PRESENT(stat)) stat = STAT_OK

         ! Finish

         return

      end subroutine data_proc_

      subroutine data_proc_sum_(j, v_seq, data, stat)

         integer, intent(in)            :: j
         integer, intent(in)            :: v_seq
         real(RD), intent(out)          :: data
         integer, intent(out), optional :: stat

         data = f(v_seq)

         if (PRESENT(stat)) stat = STAT_OK

         ! Finish

         return

      end subroutine data_proc_sum_

      !****

      subroutine interp_assert_()

         real(RD), parameter :: tol = 1E-14_RD

         real(RD) :: f_err(2)
         real(RD) :: f_sum_err

         f_err = (f_lin - f_chk)/f_chk

         if (ALL(ABS(f_err) < tol)) then
            print *,'    PASS linear'
         else
            print *,'    FAIL linear: ', MAXVAL(ABS(f_err)), '>', tol
         end if

         f_err = (f_cub - f_chk)/f_chk

         if (ALL(ABS(f_err) < tol)) then
            print *,'    PASS cubic'
         else
            print *,'    FAIL cubic: ', MAXVAL(ABS(f_err)), '>', tol
         end if

         f_sum_err = (f_sum - f_sum_chk)/f_sum_chk

         if (ABS(f_sum_err) < tol) then
            print *,'    PASS cubic sum'
         else
            print *,'    FAIL cubic sum: ', ABS(f_sum_err), '>', tol
         end if

         ! Finish

         return

      end subroutine interp_assert_

   end subroutine test_interp_

   !****

   subroutine test_adjust_()

      integer, parameter :: N = 6

      type(vgrid_t) :: vg
      real(RD)      :: x_vec(2,N)
      real(RD)      :: dx_vec(2,N)
      real(RD)      :: x_adj(2,N)
      real(RD)      :: x_adj_chk(2,N)
      integer       :: stat(N)
      integer       :: stat_chk(N)

      print *, '  adjust_x_vec'

      call adjust_arrange_()
      call adjust_act_()
      call adjust_assert_()

      ! Finish

      return

   contains

      subroutine adjust_arrange_()

         call build_vgrid_(vg)

         ! Set points needing adjustment

         ! Point not needing adjustment

         x_vec(:,1) = [0.5_RD, 1.5_RD]
         dx_vec(:,1) = [1._RD, 1._RD]

         x_adj_chk(:,1) = [0.5_RD, 1.5_RD]
         stat_chk(1) = STAT_OK

         ! Point needing adjustment in x-direction

         x_vec(:,2) = [1.5_RD, 1.5_RD]
         dx_vec(:,2) = [-1._RD, 0._RD]

         x_adj_chk(:,2) = [1.0_RD, 1.5_RD]
         stat_chk(2) = STAT_OK

         ! Point needing adjustment in x-direction, starting
         ! on grid boundary

         x_vec(:,3) = [1.5_RD, 2.0_RD]
         dx_vec(:,3) = [-1._RD, 0._RD]

         x_adj_chk(:,3) = [1.0_RD, 2.0_RD]
         stat_chk(3) = STAT_OK

         ! Point needing adjustment in y-direction, starting
         ! on grid boundary

         x_vec(:,4) = [1.5_RD, 2.0_RD]
         dx_vec(:,4) = [0._RD, -1._RD]

         x_adj_chk(:,4) = [1.5_RD, 1.0_RD]
         stat_chk(4) = STAT_OK

         ! Point needing adjustment in both directions, starting on grid corner

         x_vec(:,5) = [2.0_RD, 2.0_RD]
         dx_vec(:,5) = [-2._RD, -1._RD]

         x_adj_chk(:,5) = [1.0_RD, 1.5_RD]
         stat_chk(5) = STAT_OK

         ! Point needing adjustment but not possible

         x_vec(:,6) = [1.5_RD, 1.5_RD]
         dx_vec(:,6) = [2._RD, 1._RD]

         x_adj_chk(:,6) = [1.0_RD, 1.5_RD]
         stat_chk(6) = STAT_OUT_OF_BOUNDS_AXIS_HI

         ! Finish

         return

      end subroutine adjust_arrange_

      !****

      subroutine adjust_act_()

         integer :: i

         do i = 1, N
            call vg%adjust_x_vec(x_vec(:,i), dx_vec(:,i), x_adj(:,i), stat(i))
         end do

         ! Finish

         return

      end subroutine adjust_act_

      !****

      subroutine adjust_assert_()

         real(RD), parameter :: tol = 1E-14_RD

         integer  :: i
         real(RD) :: f_err(2)

         do i = 1, N

            if (stat(i) == stat_chk(i)) then

               if (stat(i) == STAT_OK) then

                  f_err = (x_adj(:,i) - x_adj_chk(:,i))/x_adj_chk(:,i)

                  if (ALL(ABS(f_err) < tol)) then
                     print *,'    PASS case ', i
                  else
                     print *,'    FAIL case ', i, ':', MAXVAL(ABS(f_err)), '>', tol
                  end if

               else

                  print *,'    PASS case ', i

               end if

            else

               print *,'    FAIL case ', i, ':', stat(i), '/=', stat_chk(i)

            end if

         end do

         ! Finish

         return

      end subroutine adjust_assert_

   end subroutine test_adjust_

   !****

   subroutine build_vgrid_(vg)

      type(vgrid_t), intent(inout) :: vg

      real(RD), allocatable :: x_vec(:,:)

      ! Build a vgrid to be used for testing

      ! First, set up vertex values (3x3 square, with one corner
      ! missing)

      allocate(x_vec(2,8))

      x_vec(:,1) = [0._RD, 0._RD]
      x_vec(:,2) = [1._RD, 0._RD]
      x_vec(:,3) = [2._RD, 0._RD]

      x_vec(:,4) = [0._RD, 1._RD]
      x_vec(:,5) = [1._RD, 1._RD]
      x_vec(:,6) = [2._RD, 1._RD]

      x_vec(:,7) = [0._RD, 2._RD]
      x_vec(:,8) = [1._RD, 2._RD]

      ! Construct the vgrid

      vg = vgrid_t(x_vec, ['x', 'y'])

      ! Finish

      return

   end subroutine build_vgrid_

end module utest_vgrid_m
